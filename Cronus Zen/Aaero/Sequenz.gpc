const int32 times[] = {0,4305,4805,4805,5305,5306,6707,7207,7207,7707,7708,9110,9610,9610,10110,10111,11512,12012,12012,12512,12513,13848,14348,14348,14848,14849,16283,16783,16783,17283,17284,18669,19169,19169,19669,19670,59510,60010,60160,60194,60310,60344,60360,60477,60494,60644,60928,61216,61217,61228,61712,61795,61812,62362,62379,62913,62980,63564,63597,63647,63680,63714,63764,63830,63864,63964,64064,64081,64147,64164,64181,64214,64231,64298,64314,64348,64364,64398,64402,64403,64414,64431,64448,64464,64498,64515,64531,64615,64631,64648,64698,64715,64748,64815,64982,65165,65249,65265,65315,65382,65399,65933,65949,66016,66216,66333,66366,66383,66400,66450,66483,66517,66533,66583,66600,66667,66683,66717,66750,66752,66753,66767,66783,66800,66817,66884,66917,66934,66967,67000,67017,67067,67084,67100,67134,67167,67201,67618,67634,67718,67734,67801,68335,68352,68368,68418,68669,68735,68752,68819,68986,69036,69069,69102,69119,69136,69152,69169,69186,69253,69269,69319,69336,69353,69386,69436,69456,69457,69469,69486,69536,69586,69603,69937,69953,70053,70087,70204,70521,70554,70794,70795,70804,71321,71388,71405,71922,71955,71972,72189,72206,72222,72506,72539,72556,72589,73173,73223,73240,73307,73340,73407,73440,73524,73557,73590,73607,73624,73640,73657,73724,73740,73757,73774,73790,73807,73874,73891,73907,73924,73941,73957,73991,74000,74001,74007,74024,74041,74074,74091,74107,74157,74174,74224,74241,74258,74308,74324,74341,74408,74658,74858,74992,75526,75559,75576,75609,75642,75826,75926,75976,76009,76059,76109,76126,76176,76193,76210,76260,76276,76293,76356,76357,76360,76426,76443,76460,76510,76527,76543,76593,76610,76660,76677,76693,76710,76727,76810,77160,77244,77261,77294,77311,77327,77377,77928,77945,77961,78011,78278,78328,78345,78412,78428,78579,78629,78645,78695,78712,78762,78779,78829,78896,78912,78979,78996,79062,79079,79146,79646,79647,81065,81565,81565,82065,82066,83467,83967,83967,84467,84468,85870,86370,86370,86870,86871,88272,88772,88772,89272,89273,116517,117017,117084,117100,117150,117167,117301,117351,117367,117384,117417,117434,117447,117448,117484,117501,117568,117601,117634,119069,119119,119203,119403,119953,119970,120003,120087,121421,121438,121471,121505,121522,121555,121572,121588,121605,121688,121705,121706,121722,121822,122322,122404,122405,122406,123140,123141,123874,123907,123974,123991,124024,124074,124091,124141,124157,124174,124741,124758,124791,124808,126210,126326,127127,127211,127477,127928,127961,128061,128095,128111,128629,128695,128712,128812,128829,128912,129012,129563,129580,131064,131098,131181,131198,131215,131231,131281,131298,131415,131915,131999,132232,132266,132299,133500,133517,133567,133584,133634,133650,133667,133684,133750,133767,134334,134351,134368,134384,134394,134395,134401,135819,135853,135903,136753,137104,138238,138288,138305,138338,138355,138522,138539,138605,139156,139173,139306,140657,140674,140724,140741,140757,140774,140807,140824,140858,140874,140891,140905,140906,140924,140941,141008,141024,141525,141590,141591,141592,142317,142318,143043,143110,143177,143193,143227,143243,143260,143277,143293,143343,143360,143377,143927,143994,144011,144044,144878,145179,145195,145212,145762,145796,145812,146346,146697,147097,147114,147147,147264,147281,147314,147898,147948,148115,148131,148165,148215,148732,148749,148782,148799,150234,150284,150300,150350,150434,150450,150534,150551,150567,150584,150617,151134,151151,151168,151201,151385,152069,152402,152486,152503,152619,152686,152703,152736,152803,152853,152920,152986,153537,153554,153570,153604,153620,154438,154721,154805,154829,154830,154838,155405,155439,155506,155522,155539,155656,155873,155877,155878,155889,156006,156039,156073,156340,156390,156490,156523,156607,156723,156740,156773,156840,156857,156990,157196,157197,157207,157574,157608,157791,157808,158325,158358,158375,158926,158959,158976,159560,159626,159643,159660,159676,159710,159760,159843,159910,159960,160027,160077,160143,160160,160277,160294,160310,160344,160377,160394,160400,160401,160410,160444,160460,160494,160527,160544,160594,160611,160677,160694,160711,160744,160761,160794,160811,161161,161245,161311,161378,161395,161929,161962,162012,162229,162296,162329,162362,162396,162446,162462,162479,162546,162563,162613,162629,162663,162679,162696,162745,162746,162746,162829,162846,162863,162896,162930,162946,162996,163013,163063,163080,163096,163130,163163,163297,163430,163497,163647,163664,163680,163697,163714,163730,163780,164331,164348,164364,164414,164698,164715,164731,164748,164765,164781,164798,164815,164965,164982,165015,165032,165048,165065,165082,165098,165115,165132,165148,165165,165182,165199,165232,165249,165299,165315,165332,165349,165382,165399,165432,165451,165452,165482,165532,165549,165566,165582,165599,166750,166767,166783,166800,167008,167009,167217,167401,167918,167951,167968,168519,168535,168585,168986,169169,169219,169236,169269,169303,169336,169369,169386,169486,169536,169586,169603,169620,169653,169670,169736,169753,169770,169786,169803,169820,169870,169887,169903,169920,169970,169987,169998,169999,170003,170037,170053,170070,170137,170153,170204,170220,170287,170304,170337,170404,170687,170704,170821,170838,170854,170921,170938,170988,171021,171522,171555,171622,171822,171922,171955,171972,172039,172055,172089,172105,172172,172189,172239,172256,172272,172306,172349,172350,172356,172372,172422,172439,172456,172472,172523,172539,172589,172606,172656,172673,172706,172723,172806,173040,173257,173290,173323,173373,173924,173941,173957,174007,174541,174608,175209,175459,175742,175926,176009,176276,176560,176743,176760,177027,177544,178044,178045}
const int16 angles[] = {-1,225,225,225,225,-1,315,315,315,315,-1,90,90,90,90,-1,270,270,270,270,-1,135,135,135,135,-1,45,45,45,45,-1,270,270,270,270,-1,302,302,309,312,317,320,318,324,326,332,347,359,0,0,0,34,32,32,90,90,120,120,124,132,142,147,160,176,186,206,234,244,259,266,270,282,294,313,321,330,340,356,359,0,8,14,23,35,54,62,76,106,112,122,136,143,151,180,180,180,180,186,206,241,239,239,241,210,209,172,166,162,159,142,121,104,90,72,60,42,31,16,0,0,359,356,350,345,338,298,283,270,258,248,238,223,220,212,198,182,180,179,248,248,267,270,270,254,241,209,209,216,222,239,240,221,200,172,161,140,124,111,90,70,62,49,41,36,27,10,0,359,353,346,332,310,302,319,318,323,326,330,347,347,359,0,0,0,34,32,32,54,90,90,96,90,90,95,105,120,119,128,134,146,154,169,180,196,206,212,218,220,226,236,252,260,264,270,272,284,304,315,320,322,327,339,354,359,0,3,10,22,37,48,62,83,95,112,117,126,139,146,155,180,181,185,238,239,236,229,208,209,209,173,165,154,134,108,93,74,68,57,43,36,27,0,359,358,336,328,312,285,272,265,250,239,225,222,212,208,201,180,180,180,188,206,234,256,270,270,262,247,210,210,212,220,239,234,210,200,195,188,182,175,168,160,147,140,128,122,112,106,96,96,-1,315,315,315,315,-1,90,90,90,90,-1,270,270,270,270,-1,90,90,90,90,-1,274,274,286,291,299,304,326,338,340,346,352,357,359,0,6,12,25,33,32,32,28,20,0,0,60,62,61,60,63,62,55,48,42,37,35,28,6,0,359,353,330,331,359,0,0,0,359,359,358,342,336,327,310,298,284,275,270,270,240,240,180,180,209,209,180,181,179,180,179,180,179,181,183,180,190,193,199,209,209,148,149,150,164,170,172,176,184,190,208,208,180,179,180,179,180,183,197,202,214,222,226,238,259,270,270,296,312,312,359,0,31,32,34,0,0,32,32,34,30,28,24,9,6,0,0,62,61,62,60,50,44,41,36,30,22,13,9,3,0,359,355,348,334,331,331,359,0,0,0,359,359,358,341,334,326,320,316,309,298,282,274,270,270,220,208,209,210,209,146,148,148,146,148,148,180,181,178,180,179,180,179,181,184,200,200,205,210,208,219,219,149,148,148,149,166,188,194,214,224,231,240,239,239,234,224,180,181,179,181,180,181,179,181,181,190,206,222,250,270,270,290,302,334,332,330,331,358,359,0,0,0,4,12,12,16,26,26,0,359,301,302,303,306,319,320,325,328,331,336,338,339,342,345,350,359,0,0,1,0,34,32,32,34,90,90,108,120,120,129,134,137,142,147,160,179,194,204,220,238,257,265,306,316,319,328,348,354,359,0,8,20,34,54,68,82,100,110,130,138,144,154,159,176,180,180,181,206,242,239,239,236,208,209,181,174,166,161,148,136,118,88,76,59,50,40,34,30,0,359,359,332,326,306,288,274,262,246,236,222,220,211,198,180,180,181,183,181,192,202,214,244,262,270,270,268,238,208,208,208,216,222,226,231,242,239,239,241,228,218,212,202,184,176,159,146,129,104,90,87,76,68,54,47,43,37,30,20,6,0,359,349,334,328,314,298,301,302,313,313,359,359,0,0,32,32,52,90,90,96,120,118,120,128,133,138,148,154,160,167,190,202,212,220,222,233,242,258,265,270,273,278,290,304,314,319,321,344,356,359,0,1,19,25,44,74,87,104,114,132,143,150,180,180,90,90,182,182,208,220,240,239,239,233,209,209,174,168,166,148,136,118,102,76,64,50,41,34,24,0,359,356,350,334,328,318,300,278,265,250,240,226,218,210,197,180,180,186,208,256,270,270,264,248,210,210,238,238,222,206,194,190,172,154,142,140,123,92,92,-1}
int maxIdx = 849;
int bpm=100;
int ribbon_offset=0;

//deadzone for autoswirl set negative to disable
int deadzone=5;
int ms=0;
int ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=0;

init {
	beat_anticipate=60000/(bpm*4);
}

main {
	ms+=get_rtime();
	if (get_val(XB1_VIEW)>0 && event_press(XB1_A)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=1;
		putc_oled(1,82);
		putc_oled(2,117);
		putc_oled(3,110);
		puts_oled(40,20,2,3,1);
	}
	if (event_press(XB1_B)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=0;
		putc_oled(1,83);
		putc_oled(2,116);
		putc_oled(3,111);
		putc_oled(4,112);
		puts_oled(30,20,2,4,1);
	}
	if (event_press(XB1_RB)) {ribbon_offset = ribbon_offset + 25;set_val(TRACE_1,ribbon_offset);}
	if (event_press(XB1_LB)) {ribbon_offset = ribbon_offset - 25;set_val(TRACE_1,ribbon_offset);}
	
	if (running) {
		set_val(TRACE_2,ms);
		ms_ribbon = ms + ribbon_offset;
		//advance until we reach the end or catch up with the time code
		while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
			idx++;
		}
		//if we've reached the end of the ribbon, releast LS
		if (idx>=maxIdx || angles[idx]== -1) {
			curAngle=-1;
		} else {
			curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
		}
		//set LS position if ribbon present
		if (curAngle>=0) set_polar(POLAR_LS,curAngle,32767);

		//shoot if we are on the beat
		if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
			next_beat+=1;
			combo_run(fire);
		}

		//swirl reticle if idle
		if (event_press(XB1_X)) {if (autoswirl==0) {autoswirl=1} else {autoswirl=0}}
		if (autoswirl==1 && get_val(XB1_RX)<=deadzone && get_val(XB1_RY)<=deadzone && get_val(XB1_RX)>=-deadzone && get_val(XB1_RY)>=-deadzone) {set_polar(POLAR_RS,ms%360,32767);}
	}
}

combo fire {
	set_val(XB1_RT,100);wait(50);
}