const int32 times[] = {0,11153,11653,11903,11920,11970,12220,12254,12304,12337,13038,13738,14406,14756,15757,15807,15840,16441,16491,16508,16541,17826,18326,18327,18711,19211,19261,19277,19361,20212,20312,20328,20378,20412,21263,21346,21379,21396,21796,21947,22280,22347,22614,22664,22681,22697,23615,24115,24116,24183,24683,24749,24783,24833,24849,25534,25617,25634,25700,25717,27252,27335,27352,27402,29154,29654,29655,33092,33592,33842,33858,33875,33909,34175,34226,34242,34276,34993,35660,36344,36350,36351,36695,37712,37729,37746,37779,37796,38380,38413,38479,38480,38480,39781,40281,40282,40649,41149,41416,41449,41483,42150,42250,42267,42334,43201,43235,43251,43271,43272,43285,43351,43902,44219,44236,44302,44553,44569,44586,44636,45604,46104,46105,46138,46638,46721,46788,47639,47739,47756,47789,47806,48356,48673,48823,48840,49691,49724,49774,49791,50725,50775,50842,51459,51593,51710,51760,53478,53978,53979,55047,55547,55714,55730,55764,55780,57365,57382,57599,57616,57666,57699,57749,57832,58366,58633,59501,59651,60285,60302,60835,61386,62404,62437,62470,62571,63054,63088,63138,63154,63805,64105,65106,65606,65607,67393,67893,67959,67976,67993,68043,68093,68126,70245,70745,70746,74266,74766,74833,74849,74916,75400,75417,75500,75917,75951,76117,79154,79654,79655,85227,85727,85760,85794,85810,85877,86228,86378,86461,86912,87078,88647,89147,89148,99541,100041,100041,100541,100542,100909,101409,101409,101909,101910,102277,102777,102777,103277,103278,103662,104162,104162,104662,104663,105030,105530,105530,106030,106031,106398,106898,106898,107398,107399,107750,108250,108250,108750,108751,109134,109634,109634,110134,110135,110502,111002,111002,111502,111503,111870,112370,112370,112870,112871,113238,113738,113738,114238,114239,114623,115123,115123,115623,115624,115991,116491,116491,116991,116992,120863,121363,121530,121546,121563,121580,121613,123181,123198,123415,123448,123515,123565,123615,123648,124199,124449,125267,125467,126101,126117,126651,127202,128220,128270,128286,128303,128320,128386,128887,128904,128937,128954,128970,129671,129921,130922,131422,131423,133208,133708,133742,133792,133808,133909,133942,136077,136577,136578,140065,140565,140615,140632,140715,141233,141316,141783,141950,143184,143191,143192,143201,143552,143585,143618,143885,143935,143969,144686,145370,146054,146059,146060,146388,147422,147439,147455,147472,147505,148073,148089,148106,148123,148156,148172,148173,148173,149474,149974,149975,150359,150859,150909,150926,151009,151860,151943,151977,152010,152027,152894,152911,152974,152975,152978,152994,153011,153061,153411,153578,153912,153929,153979,153995,154262,154279,154346,155263,155763,155764,155831,156331,156348,156364,156398,156414,156448,156464,156481,156498,157182,157249,157282,157349,158900,158917,158967,158982,158983,158984,159000,159067,160785,161285,161286,164740,165240,165490,165507,165523,165574,165824,165891,165924,166625,167125,167126,170229,170729,170979,170996,171046,171296,171313,171363,171379,171396,172080,172580,172581,172981,173481,173515,173548,173565,173632,174149,174216,174232,174699,174866,176101,176108,176109,176117,176468,176484,176551,176801,176868,176885,177602,178102,178103,181190,181690,181940,181957,181990,182023,182274,182290,182340,182357,182374,183041,183541,183542}
const int16 angles[] = {-1,148,148,148,139,119,119,126,142,149,149,180,180,209,209,225,238,239,213,199,180,180,180,-1,211,211,221,222,239,239,222,221,213,209,209,176,162,149,149,180,180,149,149,129,123,119,119,119,-1,183,183,205,214,231,239,239,223,222,211,209,209,181,170,150,149,149,-1,31,31,31,38,47,61,61,45,38,31,31,0,0,0,359,331,331,323,319,306,301,301,318,359,0,0,0,0,-1,331,331,331,310,301,301,317,318,331,331,346,351,359,0,5,27,0,0,9,32,32,34,43,60,60,60,-1,352,352,330,300,300,317,319,326,331,331,300,272,270,270,257,241,239,239,222,209,208,195,185,180,180,180,-1,209,209,209,213,230,240,239,151,151,154,158,163,168,180,180,210,210,239,239,180,181,210,210,215,222,239,239,227,193,180,180,149,149,149,-1,211,211,217,221,221,229,234,239,239,239,-1,221,221,252,257,269,270,277,302,301,302,331,331,331,-1,324,324,309,292,289,270,269,265,239,239,209,209,209,-1,225,225,225,225,-1,45,45,45,45,-1,315,315,315,315,-1,135,135,135,135,-1,45,45,45,45,-1,225,225,225,225,-1,135,135,135,135,-1,315,315,315,315,-1,225,225,225,225,-1,45,45,45,45,-1,315,315,315,315,-1,135,135,135,135,-1,45,45,45,45,-1,209,209,209,213,220,225,240,239,150,150,155,161,168,173,180,180,210,210,239,239,180,181,209,209,216,220,221,227,240,240,229,211,200,181,181,149,149,149,-1,211,211,214,221,221,234,239,239,239,-1,212,212,231,239,270,273,301,301,331,331,359,0,32,33,48,61,60,45,31,30,0,0,0,359,331,331,328,321,316,302,301,303,314,322,342,359,0,0,0,0,-1,329,329,319,318,301,301,317,319,325,331,331,333,359,0,1,4,12,31,32,0,0,4,21,31,31,41,60,61,61,-1,356,356,350,346,335,331,318,313,305,301,302,315,318,331,331,338,354,359,0,0,9,31,31,31,-1,149,149,149,146,137,119,119,136,149,149,149,-1,149,149,148,139,119,119,124,133,142,149,149,149,-1,210,210,223,239,244,271,270,293,301,301,331,331,359,0,31,31,42,61,60,42,31,31,31,-1,31,31,31,34,49,61,61,57,41,34,31,31,31,-1}
int maxIdx = 496;
int bpm=175;
int ribbon_offset=0;

//deadzone for autoswirl set negative to disable
int deadzone=5;
int ms=0;
int ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=0;

init {
	beat_anticipate=60000/(bpm*4);
}

main {
	ms+=get_rtime();
	if (get_val(XB1_VIEW)>0 && event_press(XB1_A)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=1;
		putc_oled(1,82);
		putc_oled(2,117);
		putc_oled(3,110);
		puts_oled(40,20,2,3,1);
	}
	if (event_press(XB1_B)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=0;
		putc_oled(1,83);
		putc_oled(2,116);
		putc_oled(3,111);
		putc_oled(4,112);
		puts_oled(30,20,2,4,1);
	}
	if (event_press(XB1_RB)) {ribbon_offset = ribbon_offset + 25;set_val(TRACE_1,ribbon_offset);}
	if (event_press(XB1_LB)) {ribbon_offset = ribbon_offset - 25;set_val(TRACE_1,ribbon_offset);}
	
	if (running) {
		set_val(TRACE_2,ms);
		ms_ribbon = ms + ribbon_offset;
		//advance until we reach the end or catch up with the time code
		while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
			idx++;
		}
		//if we've reached the end of the ribbon, releast LS
		if (idx>=maxIdx || angles[idx]== -1) {
			curAngle=-1;
		} else {
			curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
		}
		//set LS position if ribbon present
		if (curAngle>=0) set_polar(POLAR_LS,curAngle,32767);

		//shoot if we are on the beat
		if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
			next_beat+=1;
			combo_run(fire);
		}

		//swirl reticle if idle
		if (event_press(XB1_X)) {if (autoswirl==0) {autoswirl=1} else {autoswirl=0}}
		if (autoswirl==1 && get_val(XB1_RX)<=deadzone && get_val(XB1_RY)<=deadzone && get_val(XB1_RX)>=-deadzone && get_val(XB1_RY)>=-deadzone) {set_polar(POLAR_RS,ms%360,32767);}
	}
}

combo fire {
	set_val(XB1_RT,100);wait(50);
}