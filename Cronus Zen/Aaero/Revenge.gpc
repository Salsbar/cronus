const int32 times[] = {0,55222,55722,55873,55889,55939,55956,56006,56023,56073,56089,56139,56156,56190,56206,56256,56273,56340,56373,56406,56423,56473,56490,56507,56590,57724,57774,57808,57824,57841,57858,57877,57878,57891,57908,57925,57958,57975,57991,58008,58025,58041,58058,58075,58091,58125,58158,58175,58208,58225,58876,58892,59193,59693,59694,60727,61227,61227,61727,61728,62062,62562,62628,62645,62712,62745,62778,62828,62845,62862,62912,62929,62979,62995,63029,63095,63129,63236,63237,63246,63279,63312,63362,63379,63462,63479,63513,63529,63546,63563,63579,63596,63613,63646,63663,63696,64764,64780,64814,64830,64864,64881,64964,64997,64998,64999,65014,65031,65047,65064,65097,65597,65598,67250,67750,67767,67800,67817,67850,67854,67855,67867,67900,67917,67950,67967,68017,68034,68067,68084,68134,68150,68201,68217,68251,68284,68301,68334,68351,68384,68401,68417,68451,68484,68501,68534,69452,69619,69702,69719,69735,69802,69836,69869,69902,69936,69952,70002,70019,70069,70086,70136,70169,70269,70286,70369,70386,70419,70436,70469,70486,70520,70536,71554,71621,71654,71687,71704,71721,71737,71743,71744,71787,71854,71871,71888,71921,71938,71971,72471,72472,74441,74941,74941,75441,75442,75775,76275,76325,76342,76392,76409,76459,76576,76659,76692,76742,76759,76809,76843,76893,76909,76946,76947,76976,77143,77176,77210,77226,77260,77276,77293,77310,77326,77343,77360,77376,77393,78561,78628,78644,78671,78672,78678,78694,78711,78728,78744,78761,78794,78811,79311,79312,80880,81380,81380,81880,81881,137520,138020,138037,138087,138120,138154,138221,138254,138271,138287,138304,138354,138371,138421,138437,138487,138504,138554,138571,138621,138638,138688,138704,138754,138771,138804,138821,138888,140039,140072,140089,140122,140139,140173,140185,140186,140223,140239,140256,140273,140289,140306,140323,140339,140389,140423,140473,140489,140989,140990,143059,143559,143559,144059,144060,144344,144844,144927,144944,145061,145077,145144,145161,145211,145261,145278,145344,145378,145494,145511,145515,145516,145578,145611,145645,145661,145745,145778,145795,145811,145828,145845,145862,145878,145895,145912,145928,145945,145962,147063,147079,147096,147113,147129,147146,147163,147196,147230,147246,147263,147279,147280,147313,147330,147346,147380,147880,147881,149482,149982,149999,150032,150066,150082,150116,150130,150131,150132,150183,150199,150233,150249,150266,150283,150299,150316,150366,150383,150433,150449,150499,150516,150566,150583,150600,150616,150716,150733,150750,150766,150833,151734,151784,151801,151851,151884,151951,151968,152101,152118,152185,152201,152251,152268,152318,152335,152385,152401,152435,152451,152502,152518,152585,152668,152702,152718,152735,152768,152785,152818,153836,153853,153886,153903,153920,153936,153953,153986,154020,154036,154040,154041,154070,154086,154103,154136,154153,154187,154203,154220,154253,154753,154754,156706,157206,157206,157706,157707,158058,158558,158591,158608,158674,158791,158808,158824,158875,158891,158941,158975,159058,159075,159158,159208,159234,159235,159275,159325,159375,159442,159458,159492,159525,159542,159559,159575,159592,159625,159642,159675,159692,160843,160860,160910,160927,160943,160953,160954,160960,160993,161027,161043,161093,161593,161594,163163,163663,163663,164163,164164}
const int16 angles[] = {-1,182,182,204,208,215,222,228,234,243,248,256,261,266,270,278,282,292,298,302,307,314,318,318,331,332,335,342,346,349,356,359,0,2,4,12,21,22,24,32,36,43,44,47,54,63,68,74,80,85,85,225,225,225,-1,225,225,225,225,-1,90,90,80,76,70,64,62,55,54,50,46,42,36,32,30,20,16,0,359,358,354,348,344,340,331,332,331,333,332,329,334,334,330,334,330,332,332,330,332,329,334,330,338,358,359,0,11,20,26,53,70,70,-1,332,332,340,346,352,358,359,0,4,12,18,24,32,45,52,59,66,76,82,92,99,102,112,114,123,126,133,136,142,146,156,157,165,182,202,213,214,219,228,234,239,246,250,254,260,264,270,274,279,284,297,300,302,300,302,300,301,300,302,300,301,314,322,334,338,346,358,359,0,10,42,46,58,68,76,85,85,-1,225,225,225,225,-1,88,88,84,80,74,70,66,50,41,34,30,26,20,14,9,4,0,359,356,335,332,331,333,329,334,329,328,333,329,330,333,331,331,336,346,359,0,3,10,20,27,36,52,68,74,74,-1,270,270,270,270,-1,180,180,182,192,196,202,213,220,221,224,230,240,245,253,258,265,270,277,282,288,293,300,304,311,316,318,322,331,332,333,340,346,350,356,359,0,10,13,18,22,24,32,36,42,52,61,71,76,76,-1,225,225,225,225,-1,90,90,78,75,62,58,52,48,44,35,34,25,20,4,0,0,359,352,346,344,340,330,332,330,330,332,332,328,334,334,328,332,334,330,332,330,330,332,329,329,332,330,329,335,348,359,0,22,30,51,70,70,-1,321,321,322,334,341,347,354,359,0,0,12,18,24,31,35,41,44,52,63,70,80,86,96,102,112,112,121,122,143,145,151,154,168,180,187,190,194,200,208,211,230,235,244,248,254,258,264,268,274,278,282,285,290,294,302,300,302,300,302,300,303,300,301,299,308,316,320,322,326,340,350,358,359,0,10,18,22,36,48,60,64,75,84,84,-1,225,225,225,225,-1,90,90,86,82,74,59,58,54,50,46,42,35,26,21,11,3,0,359,354,346,342,333,331,332,329,334,330,328,334,328,332,330,332,331,344,336,347,352,359,0,4,18,36,54,74,74,-1,270,270,270,270,-1}
int maxIdx = 497;
int bpm=140;
int ribbon_offset=0;

//deadzone for autoswirl set negative to disable
int deadzone=5;
int ms=0;
int ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=0;

init {
	beat_anticipate=60000/(bpm*4);
}

main {
	ms+=get_rtime();
	if (get_val(XB1_VIEW)>0 && event_press(XB1_A)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=1;
		putc_oled(1,82);
		putc_oled(2,117);
		putc_oled(3,110);
		puts_oled(40,20,2,3,1);
	}
	if (event_press(XB1_B)) {
		ms=0;
		idx=0;
		next_beat=0;
		cls_oled(0);
		running=0;
		putc_oled(1,83);
		putc_oled(2,116);
		putc_oled(3,111);
		putc_oled(4,112);
		puts_oled(30,20,2,4,1);
	}
	if (event_press(XB1_RB)) {ribbon_offset = ribbon_offset + 25;set_val(TRACE_1,ribbon_offset);}
	if (event_press(XB1_LB)) {ribbon_offset = ribbon_offset - 25;set_val(TRACE_1,ribbon_offset);}
	
	if (running) {
		set_val(TRACE_2,ms);
		ms_ribbon = ms + ribbon_offset;
		//advance until we reach the end or catch up with the time code
		while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
			idx++;
		}
		//if we've reached the end of the ribbon, releast LS
		if (idx>=maxIdx || angles[idx]== -1) {
			curAngle=-1;
		} else {
			curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
		}
		//set LS position if ribbon present
		if (curAngle>=0) set_polar(POLAR_LS,curAngle,32767);

		//shoot if we are on the beat
		if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
			next_beat+=1;
			combo_run(fire);
		}

		//swirl reticle if idle
		if (event_press(XB1_X)) {if (autoswirl==0) {autoswirl=1} else {autoswirl=0}}
		if (autoswirl==1 && get_val(XB1_RX)<=deadzone && get_val(XB1_RY)<=deadzone && get_val(XB1_RX)>=-deadzone && get_val(XB1_RY)>=-deadzone) {set_polar(POLAR_RS,ms%360,32767);}
	}
}

combo fire {
	set_val(XB1_RT,100);wait(50);
}