#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,41192,41692,44244,44245,44246,44378,45112,47681,47965,48365,48546,48547,48549,49983,49983,49984,50017,50601,50677,50678,50684,51685,51685,51686,51718,51768,52519,52601,52602,52603,53011,53012,53420,53437,54538,54768,54769,54955,55272,55405,55489,55589,56623,56640,56790,56807,56857,56874,57257,57274,57524,57674,57841,57908,57975,58384,58385,58559,58809,60944,61144,61278,61378,61751,61752,61812,62162,62262,62396,62446,64815,65282,66250,66266,68151,68651,68652,116617,117117,117175,117176,117234,117234,117235,117284,117518,117526,117527,117534,117668,117766,117767,117768,118335,118336,118337,118418,119203,119253,119325,119326,119686,120070,120554,123106,123357,123757,123961,123962,123974,125375,125376,125377,125475,126059,126076,126123,126124,126126,127077,127079,127080,127211,127945,128026,128027,128028,128862,128862,128863,128879,129963,130203,130204,130214,130647,130814,130931,131014,132049,132065,132282,132299,132683,132699,132933,133000,133300,133333,133400,133812,133813,133984,134184,134284,136353,136403,136587,136720,136803,137175,137176,137304,137604,137688,137821,137871,140224,140691,141708,141725,143594,144094,144095};
const int angles[] = {-1,358,358,359,359,0,36,180,182,244,326,359,0,0,0,0,359,328,332,359,0,2,0,0,359,342,331,331,359,0,0,0,359,359,298,302,359,0,46,124,148,148,120,116,90,90,102,102,148,148,90,94,149,210,250,276,359,0,35,90,94,164,213,270,359,0,14,102,120,118,90,94,180,180,118,118,118,-1,0,0,0,359,359,359,0,29,32,0,359,331,331,359,0,0,0,0,359,330,330,359,359,0,2,90,180,182,234,320,359,0,2,0,0,359,330,334,349,359,0,0,0,0,359,330,331,359,0,0,0,0,359,301,302,359,0,2,111,146,148,118,118,90,90,148,148,90,94,114,228,250,274,359,0,35,79,90,92,104,170,224,268,359,0,31,106,120,120,90,90,180,179,118,120,120,-1};
int maxIdx = 174;
int bpm=<$BMP>;
int ribbon_offset=-300;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}