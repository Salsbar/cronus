#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,6374,6874,6940,6957,7007,7040,7140,7241,7291,7303,7304,9793,11879,12396,12412,13714,13814,13847,13897,14147,17751,18902,19403,19403,19404,19419,20587,20654,20737,20887,20937,20987,20988,20988,23323,23540,23551,23552,23557,23657,23661,23662,23674,25759,26259,26276,27444,27511,27594,27744,27794,27844,30364,30380,30397,32532,33032,33033,33784,34284,39406,39506,39639,41408,41422,41423,41425,46279,46378,46379,46496,48265,48281,53153,53320,53337,55138,55152,55153,55155,59960,60460,60461,61212,61712,61828,61845,62012,62079,62129,62163,62164,62179,64131,64147,64164,66817,67317,67318,68085,68585,68652,68735,68835,68952,69002,73674,74174,74175,74959,75459,75525,75559,75676,75792,75857,75858,75859,77844,77861,77878,80497,80514,81014,81015,81782,82282,82366,82449,82599,82649,82699,86036,87387,87887,87888,129797,130297,130397,130414,130480,130597,130647,130664,130725,130726,130731,133500,133517,133533,133600,133617,135385,135885,135886,136670,137170,137237,137270,137337,137454,137571,140240,140257,140273,142242,142742,142743,143494,143994,144077,144161,144311,144344,144426,144427,144428,148098,149099,149599,149600,150351,150851,150967,150984,151151,151284,154888,155956,156456,156457,157224,157724,162846,163030,163146,164848,164862,164863,164865,167567,169720,169803,169804,169886,169903,171705,171722,176576,176777,178545,178559,178560,178562,183383,183883,183884,184635,185135,185218,185302,185402,185535,185567,185568,185569,190240,190740,190741,191492,191992,192059,192125,192159,192326,192426,195896,197097,197597,197598,198349,198849,198949,198982,199032,199166,199199,199280,199281,199282,202185,202219,202235,202302,202336,202352,202369,203954,204454,204455,205206,205706,205707,205708,205806,205839,205889,206139,210777,210783,210784,210794,210804,210805,210811,211311,211312};
const int angles[] = {-1,185,185,205,222,241,261,300,334,359,359,0,96,178,178,356,358,320,298,273,180,44,2,0,2,359,184,190,210,258,318,334,359,0,0,90,86,0,359,322,322,359,0,103,178,178,356,350,328,281,222,206,180,84,90,82,2,2,-1,208,208,208,188,148,148,0,359,332,332,359,0,32,32,208,208,158,146,148,0,359,331,331,331,-1,182,182,227,242,312,332,354,359,0,2,78,88,79,180,180,-1,350,350,330,282,240,199,180,2,2,-1,195,195,218,241,292,333,359,0,0,78,88,79,178,179,179,-1,359,359,329,282,224,207,181,54,2,2,-1,182,182,224,240,271,315,331,343,359,0,1,106,106,282,282,112,178,178,-1,344,344,322,300,269,224,180,78,88,76,2,2,-1,182,182,211,258,318,324,359,0,0,138,178,178,-1,357,357,312,298,230,180,44,2,2,-1,208,208,208,154,148,148,0,359,332,330,332,359,0,27,34,32,208,208,148,148,0,359,332,332,332,-1,182,182,210,256,298,346,359,0,0,178,178,-1,358,358,338,304,284,220,180,48,1,1,-1,180,180,216,239,264,318,324,359,0,0,110,110,190,198,191,191,118,179,179,-1,0,0,0,359,322,300,275,180,2,0,359,355,359,0,2,2,-1};
int maxIdx = 277;
int bpm=140;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}