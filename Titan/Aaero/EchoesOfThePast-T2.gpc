#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,38356,38856,38939,38989,39173,39406,40057,40290,40307,40324,40340,40390,40407,40524,40591,40641,40691,40757,40791,40841,40873,40874,40874,41158,41275,41325,41525,41675,42826,43026,43160,43443,43510,43610,43794,43977,44461,44711,44878,45162,45445,45729,45829,45863,46079,46146,46230,46313,47381,47781,48015,48131,48232,48448,48498,48532,49195,49196,49416,49449,49483,49516,49533,49600,49633,49783,49800,49883,49933,49967,49999,50000,50000,50300,50400,50450,50617,50784,51919,52169,52319,52452,52603,52636,52669,52736,52903,52986,53046,53047,53103,53737,54004,54288,54588,54855,54956,54957,55088,55189,55372,56590,57024,57224,57341,57608,57691,57941,58275,58592,58825,59076,59359,59426,59493,59560,59710,59860,60010,60744,60878,61712,61845,61995,62262,62579,62663,62713,62779,62946,63030,63063,63146,63180,63247,63263,63280,63285,63286,63297,63313,63330,63363,63380,63447,63480,63514,63580,63630,63680,63764,63931,64001,64002,64097,64131,64348,64515,65666,66049,66283,66416,66500,66683,66834,67075,67076,67201,67434,67734,68018,68302,68535,68602,68652,68685,68836,69052,69136,69203,70020,70170,70587,70804,70888,70988,71171,71271,71332,71333,71388,72039,72306,72589,72873,73140,73236,73237,73373,73524,73674,75075,75292,75792,75793,111512,112012,112112,112145,112346,112546,113463,113730,114031,114281,114464,114481,115015,115299,115549,115732,116166,116316,116583,116783,116967,117117,118268,118435,118468,118485,118502,118585,118685,118802,119203,121154,121271,121355,121505,121655,121688,122289,122306,122623,122873,123173,123423,124474,124775,125042,125626,125642,125742,125826,125943,126126,126189,126190,126226,126877,127094,127108,127109,127127,127143,127144,127144,127444,127728,127995,128103,128104,128212,128312,128495,128579,129796,130163,130347,130380,130414,130464,130514,130714,130831,131198,131415,131732,131965,132232,132516,132616,132699,132850,133016,133150,133901,134034,134868,135035,135152,135385,135819,135839,135840,135986,136053,136086,136103,136186,136253,136270,136320,136336,136403,136520,136553,136603,136650,136651,136703,136753,137037,137127,137128,137204,137354,137538,137654,138805,139206,139439,139573,139656,139857,139973,140207,140208,140340,140574,140891,141141,141425,141708,141792,141808,141842,141875,142009,142176,142242,142326,143177,143327,143744,143944,144027,144178,144444,144476,144477,144528,145179,145445,145729,146013,146280,146384,146385,146513,146630,146813,147798,148448,148599,148899,149132,150033,150250,150968,151201,151401,151935,152119,152336,152786,152803,152886,153153,153470,153720,154107,154108,154605,154805,155038,155046,155047,155189,155305,155452,155453,155455,155756,155973,156523,156541,156542,156707,156890,157357,157374,157457,157558,157624,157758,158041,158292,159176,159426,159860,160010,160327,160527,161211,161495,161929,161945,162029,162129,162179,162312,162629,162846,163130,163146,163730,164014,164160,164161,164164,164176,164177,164314,164448,164578,164579,164581,164654,164655,165165,165666,165883,165899,166400,166733,166884,167184,167401,168318,168535,169236,169486,169670,170204,170470,170487,171071,171088,171171,171455,171772,172005,172392,172393,172890,173090,173323,173331,173332,173473,173590,173737,173738,173740,174041,174274,174558,174563,174564,174575,175342,175592,175909,175926,176326,176577,177461,177711,178145,178312,178612,178829,179112,179129,180113,180280,180430,180597,180914,181131,181525,181526,182032,182232,182432,182716,183150,183383,183834,184067,184084,184551,184868,184985,185002,185502,185503};
const int angles[] = {-1,180,180,154,132,72,14,0,0,16,24,52,84,100,148,192,218,270,299,318,339,359,0,0,4,47,66,126,166,148,152,180,175,154,113,58,14,4,27,30,2,30,4,36,54,120,135,160,164,148,180,184,216,259,322,333,346,359,0,4,14,50,70,89,123,134,212,243,296,318,336,359,0,0,5,40,60,114,155,149,152,180,183,214,226,244,268,318,340,359,0,18,30,0,30,2,29,0,359,321,279,226,209,205,154,109,34,15,1,26,28,7,30,3,1,24,62,114,158,208,206,180,178,132,82,13,0,54,83,112,177,208,238,283,302,328,346,354,359,0,10,18,41,64,83,120,130,148,183,212,264,292,335,359,0,33,50,118,162,148,180,180,216,254,308,347,359,0,6,27,28,2,29,7,14,34,52,110,176,201,209,208,187,182,206,214,258,312,339,359,0,18,26,2,30,2,29,0,359,318,263,220,209,209,209,-1,4,4,38,54,117,165,206,182,206,184,184,120,124,147,120,148,152,180,176,102,50,16,0,2,18,24,40,79,120,155,180,182,214,252,298,340,347,347,208,205,182,206,186,180,176,148,148,210,214,250,288,338,359,0,12,30,6,0,359,351,359,0,0,30,2,30,0,359,329,286,230,223,209,205,158,148,131,117,98,45,13,6,26,30,8,30,0,17,58,112,163,208,205,180,176,115,78,18,0,0,359,356,334,302,279,235,208,190,158,130,85,48,35,17,0,359,340,331,335,359,0,20,78,130,162,148,180,184,222,259,317,348,359,0,6,26,28,3,32,1,30,44,56,72,118,167,192,209,205,187,184,206,214,275,348,359,0,18,26,2,30,2,30,0,359,322,275,222,180,183,209,206,184,176,154,180,174,154,180,184,209,209,270,274,332,334,356,359,0,4,26,0,0,359,351,334,359,0,0,6,26,0,0,359,355,331,331,270,266,238,232,209,206,184,176,153,148,180,176,156,190,209,209,270,275,302,305,331,336,354,354,301,304,336,359,0,0,0,359,354,333,359,0,0,0,359,356,331,331,270,267,209,180,176,154,146,124,148,142,123,148,148,209,209,270,274,331,336,356,359,0,4,26,0,0,359,351,334,359,0,0,4,26,26,0,359,302,299,270,270,208,205,184,176,153,148,180,176,154,154,239,242,270,301,331,336,356,359,0,4,26,0,60,65,87,60,60,0,3,36,60,60,60,-1};
int maxIdx = 529;
int bpm=<$BMP>;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}