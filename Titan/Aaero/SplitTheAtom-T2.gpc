#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,15716,16216,16216,16716,16717,19070,19570,19570,20070,20071,23791,24291,24291,24791,24792,28262,28762,28762,29262,29263,31182,31682,31815,31849,31999,32065,32155,32156,32165,32599,33267,33283,33600,33700,33800,33967,34017,34082,34083,34084,34085,34086,34201,34318,34451,34535,35519,35636,35669,35802,35853,35869,35919,35953,36008,36009,36053,36436,37104,37120,37437,37588,37638,37704,37754,37821,37921,38021,38055,38138,38172,38338,38355,38372,38872,38873,39757,40257,40891,40908,41859,41875,42809,42826,43777,43794,44728,44745,45045,45545,45546,46547,47047,47214,47264,47481,47518,47519,47531,47948,48448,48449,48466,48966,49116,49149,49249,49283,49366,49449,49583,49733,49800,49883,50884,51018,51051,51084,51235,51301,51345,51346,51351,51802,52636,52653,52803,52936,52970,53086,53153,53203,53287,53370,53453,53487,53654,53704,53720,54721,54821,54888,54972,55138,55189,55196,55197,55606,56490,56507,56673,56723,56823,56990,57107,57124,57224,57257,57307,57341,57474,57574,57608,59526,59626,59660,59743,60227,60310,60494,60744,60761,60978,61361,61861,61862,61896,62396,62529,62563,62579,62779,62813,62863,62884,62885,63230,63330,63981,63997,64331,64481,64515,64748,64796,64797,64798,64799,64800,64915,64948,65015,65048,65115,65165,65249,66250,66400,66450,66633,66720,66721,66733,67150,67650,67651,67685,68185,68318,68352,68468,68619,68652,68819,68869,69086,70070,70187,70220,70287,70320,70454,70561,70562,70571,70988,71488,71489,71505,72005,72122,72139,72222,72256,72372,72470,72471,72472,72473,72474,72623,72656,72789,72940,73924,74074,74157,74374,74390,74391,74391,74858,75509,75526,75843,76009,76043,76260,76293,76326,76476,76510,76643,76710,76777,77277,77278,91642,92142,92593,93093,93094,93561,94061,94545,95045,95046,95479,95979,96463,96963,96964,97398,97898,97898,98398,98399,99316,99816,99816,100316,100317,101252,101752,101752,102252,102253,103170,103670,104137,104637,104638,105072,105572,106056,106556,106557,106991,107491,107491,107991,107992,123341,123841,123941,123974,124024,124074,124124,124191,124258,124325,124326,124358,124741,125241,125242,125276,125776,125876,125893,126026,126143,126226,126360,126376,126493,126593,126677,127678,127811,127861,127895,128028,128095,128154,128155,128161,128595,129263,129279,129613,129696,129730,129780,129813,129963,129997,130030,130080,130214,130247,130330,130464,130531,131515,131648,131715,131882,131949,131997,131998,131999,132015,132032,132149,132432,133100,133116,133433,133584,133650,133800,133851,133884,133934,134034,134051,134201,134251,134351,134384,135369,135502,135536,135552,135636,135669,135736,135841,135842,135869,136286,136954,136970,137287,137387,137404,137487,137521,137588,137638,137688,137721,138221,138222,138706,139206,139323,139339,139489,139623,139680,139681,139706,139857,140007,140107,140607,140608,140624,141124,141275,141341,141425,141475,141606,141607,141608,141609,141610,141758,141959,142042,143043,143177,143227,143243,143327,143393,143443,143515,143516,143527,143961,144628,144645,144962,145078,145112,145245,145295,145329,145429,145445,145629,145662,145829,145879,146880,146997,147014,147097,147130,147214,147247,147297,147364,147365,147397,147564,147748,148182,148465,148482,148815,148916,148949,149099,149216,149249,149283,149433,149466,149633,149700,149766,151668,151768,151785,151852,151885,152369,152436,152503,152536,152636,153136,153403,153570,154221,154238,154555,154688,154721,154755,154938,155040,155041,155072,155472,156139,156156,156473,156590,156623,156707,156840,156957,157040,157124,157140,157324,157391,157424,158408,158542,158575,158609,158659,158692,158775,158874,158875,158876,159309,159809,159810,159827,160327,160527,160561,160694,160761,160827,160928,160978,161094,161178,161245,162229,162329,162396,162429,162696,162717,162718,163030,163180,163814,163830,164164,164264,164314,164431,164481,164515,164565,164615,164631,164748,164781,164915,165082,166083,166200,166216,166283,166316,166557,166558,166583,166984,167484,167485,167952,168452,168468,168485,168502,168902,168952,169002,169036,169119,169253,169436,169536,169670,169837,170204,170219,170220,170220,170414,170415,170888,170938,170988,171154,171238,171355,171438,171471,171655,171788,172139,172155,172806,172856,172890,172940,172990,173106,173273,173357,173373,173574,173707,174041,174056,174057,174057,174626,174627,174708,174775,174858,174958,175192,175309,175359,175442,175626,175976,175993,176143,176643,176644};
const int angles[] = {-1,270,270,270,270,-1,270,270,270,270,-1,270,270,270,270,-1,270,270,270,270,-1,180,180,229,250,302,326,359,0,3,88,88,182,182,212,263,318,336,359,0,0,0,359,314,264,220,190,182,221,240,292,306,316,328,344,359,0,12,88,88,180,180,236,262,283,304,320,357,328,306,275,258,209,199,211,211,-1,356,356,356,184,184,356,356,184,184,356,356,184,184,184,-1,184,184,248,270,346,359,0,4,87,87,-1,182,182,240,258,290,306,332,358,311,249,222,190,186,231,244,264,316,338,359,0,2,88,90,182,182,230,248,292,316,330,356,328,293,275,220,204,194,182,212,246,280,336,358,359,0,82,90,190,194,208,255,316,353,357,324,306,287,270,222,192,180,176,135,116,90,94,123,180,169,180,177,100,100,-1,180,180,228,242,255,323,332,355,359,0,72,87,87,180,184,242,260,340,359,0,0,0,359,322,301,276,260,240,220,194,183,240,266,329,359,0,4,88,88,-1,191,191,238,258,300,350,356,290,268,194,180,212,235,260,277,320,359,0,3,86,86,-1,180,180,221,236,266,282,320,359,0,0,0,359,308,288,240,190,184,240,276,348,359,0,0,86,86,180,180,244,263,336,351,358,300,282,236,222,190,190,-1,270,270,270,270,-1,315,315,315,315,-1,356,356,356,356,-1,45,45,45,45,-1,90,90,90,90,-1,135,135,135,135,-1,184,184,184,184,-1,225,225,225,225,-1,270,270,270,270,-1,182,182,211,233,253,278,290,316,338,359,0,10,86,86,-1,184,184,220,234,286,324,359,319,304,258,224,199,183,228,250,268,316,337,359,0,2,88,88,180,184,211,232,252,269,320,328,344,358,309,290,258,216,194,180,228,261,318,342,359,0,0,0,12,32,86,86,180,180,236,267,320,331,348,356,322,307,254,232,198,190,182,230,246,260,288,302,320,359,0,10,88,88,182,182,215,230,262,278,298,318,334,346,346,-1,182,182,222,238,294,340,359,0,8,36,68,86,86,-1,184,184,240,271,296,318,359,0,0,0,359,300,226,197,182,230,252,266,292,316,331,359,0,4,88,88,180,180,222,242,294,308,320,355,359,286,268,214,197,180,220,236,266,282,308,320,338,359,0,10,42,82,86,86,184,188,218,240,298,336,350,358,301,282,222,205,180,179,143,128,105,90,90,114,132,146,180,176,122,94,94,182,182,226,240,261,326,359,0,10,88,88,180,180,218,238,274,318,358,330,296,283,222,199,191,184,236,248,266,282,296,320,359,0,0,88,88,-1,182,182,262,279,322,350,347,310,286,246,218,192,180,214,240,259,355,359,0,65,88,88,180,183,213,244,288,302,318,331,353,358,322,302,250,196,181,221,236,261,278,359,0,8,88,88,-1,93,93,96,90,100,171,180,164,144,108,60,2,47,100,148,148,0,356,359,359,0,8,26,52,114,138,178,148,126,60,17,17,184,172,156,135,118,96,56,0,36,49,121,166,166,0,356,359,359,0,0,26,66,102,180,130,108,78,20,20,184,184,184,-1};
int maxIdx = 669;
int bpm=125;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}