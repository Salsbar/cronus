#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,72390,72890,73073,73223,74257,74258,75292,77611,77761,77845,77911,77942,77943,77995,78011,78045,78078,78161,78245,78262,78412,78495,78729,79062,79513,79580,79630,80330,80414,80447,80781,80864,80914,81398,81732,82182,82299,82332,82783,82883,82916,82983,83450,83517,83567,83588,83589,83600,83617,83634,83684,84034,84117,84201,84224,84225,84234,84318,84334,84384,86453,87707,87708,88839,88922,89056,89173,89206,89256,89640,89671,89672,89890,90240,90674,90757,90790,90791,90791,90907,90908,91491,91575,91608,91942,92042,92074,92075,92075,92543,92545,92546,92860,92876,93343,93410,93475,93476,93477,93593,93594,93944,94077,94161,94628,94678,94721,94722,94745,94778,94811,94845,95195,95279,95362,95395,95479,95495,95529,95546,96580,96581,97614,99850,100083,100117,100234,100267,100268,100300,100317,100334,100350,100367,100434,100801,101051,101318,101368,101835,101885,101902,101935,101969,102653,102753,102769,103103,103187,103237,103720,104021,104054,104505,104571,104638,105088,105189,105255,105322,105772,105822,105839,105889,105906,105907,105956,105973,106006,106373,106456,106490,106558,106559,106657,106673,106723,108792,110063,110064,110127,111245,111295,111345,111395,111461,111478,111512,111562,111578,111662,112162,112163,139373,139873,140007,140190,141233,141234,141542,142559,144595,144728,144895,144914,144915,144928,144978,144995,145062,145245,145462,145696,146029,146480,146563,146613,147281,147364,147397,147414,147764,147798,147831,147881,148365,148665,148682,149149,149199,149233,149266,149299,149750,149867,149883,149967,150434,150450,150484,150501,150534,150551,150566,150567,150567,150584,150601,150634,150651,151001,151134,151203,151204,151268,151285,151301,151351,151401,153504,154684,154685,155606,155906,155939,156023,156123,156139,156156,156173,156190,156223,156340,156356,156373,156640,156663,156664,156874,157140,157224,157658,157758,157773,157774,157774,158475,158475,158476,158592,158942,159057,159058,159059,159175,159176,159526,159810,159877,160327,160394,160443,160444,160444,160565,160566,160928,161128,161161,161595,161662,161678,161695,161701,161702,161712,161745,161762,161812,162312,162313};
const int angles[] = {-1,182,182,225,270,359,0,89,258,272,310,341,359,0,30,48,62,82,108,121,132,164,180,185,239,239,212,180,184,220,239,235,210,180,184,239,238,188,180,183,220,238,270,270,311,339,359,0,10,20,52,90,86,46,13,0,359,354,317,298,270,92,0,359,276,266,211,138,116,90,0,0,359,356,301,303,338,359,0,0,0,359,357,322,301,301,341,359,0,0,0,0,359,304,298,300,328,359,0,0,0,359,358,328,300,304,326,359,0,18,46,75,90,93,133,166,186,222,242,256,270,359,0,89,252,270,288,338,359,0,20,26,44,51,66,94,180,184,228,242,240,216,212,193,180,181,228,239,239,212,180,183,234,239,238,216,180,178,210,244,270,270,296,311,342,359,0,48,72,90,78,48,31,0,359,314,292,270,90,0,359,355,270,252,227,208,166,160,130,106,92,116,116,-1,184,184,212,270,359,0,26,110,260,270,345,359,0,10,36,52,86,133,180,183,239,240,206,180,183,206,228,240,240,224,211,180,182,233,242,242,221,208,188,180,182,222,236,270,270,288,302,317,328,349,359,0,0,20,32,67,92,86,31,0,359,330,326,306,276,266,86,0,359,292,264,248,214,156,148,130,124,109,96,96,90,54,0,0,359,355,310,301,302,350,359,0,0,0,0,359,301,304,359,0,0,0,359,358,310,301,304,327,359,0,0,0,359,358,307,301,301,326,344,353,359,0,10,28,54,84,84,-1};
int maxIdx = 321;
int bpm=172;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}