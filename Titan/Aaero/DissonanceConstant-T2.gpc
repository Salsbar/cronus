#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,22390,22890,22990,23023,23106,23240,23479,23480,24208,24958,25225,25459,25526,25726,25776,25959,26009,26243,26360,26593,26877,27010,27060,27110,27394,27544,27594,28161,28177,28178,28178,28445,28562,28595,28662,28779,28962,29780,30631,31048,31198,31365,31532,31632,31682,31698,31882,31932,32049,32115,32416,32516,32633,32783,32833,32866,33033,33209,33210,33217,33267,33932,33933,33984,34084,34117,34134,34301,34351,35319,36069,36320,36553,36637,36837,37087,37337,37454,37588,37638,37688,37871,37971,38188,38322,38472,38522,38705,39256,39273,39540,39606,39656,39706,39840,39907,40123,40124,40874,41725,42125,42309,42476,42643,42743,42826,42976,43043,43119,43120,43143,43193,43510,43610,43727,43877,43944,43977,44178,44328,44344,44844,44845,57742,58242,58525,58675,58725,58759,59026,59092,59276,59543,59676,59877,59943,60160,60194,60394,60511,60694,60911,61461,61477,61478,61478,61728,61812,61979,62095,63080,63931,64348,64498,64665,64831,64948,65015,65082,65182,65232,65332,65382,65732,65766,65799,65899,66049,66066,66099,66133,66166,66366,66492,66493,66517,66550,67284,67285,67286,67384,67417,67451,67484,67634,68619,69353,69620,69853,70120,70170,70370,70470,70637,70754,70971,71004,71271,71488,71522,71788,72005,72556,72573,72823,72906,72940,73023,73156,73207,73427,73428,74174,75025,75425,75592,75759,75943,76009,76059,76093,76276,76326,76376,76411,76412,76476,76827,76877,76894,76910,77027,77177,77211,77244,77394,77578,77644,78412,78478,78495,78562,78595,78762,78978,78979,79730,80464,80714,80931,80948,81231,81281,81465,81532,81732,81865,81999,82049,82082,82366,82583,82649,82900,83083,83650,83667,83917,83918,83919,84017,84067,84134,84268,84418,85269,86086,86520,86703,86870,87020,87120,87221,87387,87504,87588,87921,88005,88105,88272,88338,88372,88555,88691,88692,88739,89239,89240,111178,111678,111762,111795,111879,111995,112079,112261,112262,113013,113747,114014,114147,114248,114531,114748,114815,115032,115165,115282,115332,115382,115649,115699,115899,116183,116400,116950,116966,116967,116967,117217,117301,117351,117417,117484,117551,117618,118585,119386,119820,119987,120153,120337,120387,120454,120487,120671,120721,120871,121221,121288,121388,121572,121605,121638,121855,121980,121981,122005,122039,122674,122675,122773,122840,122940,123073,123140,124107,124858,125108,125342,125409,125609,125659,125859,126143,126243,126460,126510,126760,126994,127277,127427,127477,128045,128061,128328,128428,128545,128662,128924,128925,129663,130497,130914,131064,131148,131265,131415,131515,131582,131765,131815,131903,131904,131915,131965,132316,132399,132499,132683,132733,132866,133050,133116,133133,133633,133634,157675,158175,158408,158642,158926,159059,159109,159159,159443,159510,159511,159526,159531,159532,159760,159793,160043,160294,160561,160611,160777,161277,161278,163180,163680,164214,164381,164548,164731,164815,164882,165065,165115,165132,165182,165265,165599,165682,165782,165949,165999,166033,166250,166368,166369,166416,166979,166980,167167,167251,167284,167367,167484,167551,168519,169253,169503,169720,169786,170003,170053,170254,170404,170521,170637,170854,170921,171154,171371,171438,171672,171889,172422,172439,172706,172823,172856,172940,173056,173314,173315,173941,174074,174892,175309,175475,175659,175809,175859,175893,175909,175959,176026,176159,176300,176301,176343,176393,176710,176777,176810,176910,177060,177277,177511,177528,178028,178029};
const int angles[] = {-1,180,180,222,244,281,331,359,0,86,58,1,58,49,8,10,54,56,9,2,60,2,34,48,62,2,37,52,54,0,357,359,357,308,286,256,214,189,92,120,124,149,119,118,146,130,117,117,142,194,209,212,233,209,212,230,247,302,359,0,2,19,0,359,358,320,303,288,222,207,94,124,180,122,133,181,120,171,177,146,132,119,156,180,124,140,173,170,126,126,184,184,206,234,261,316,334,359,0,88,60,60,32,60,56,32,60,63,37,0,359,348,331,328,306,331,330,306,289,220,168,160,160,-1,61,61,3,38,52,60,7,12,60,8,8,56,51,5,8,57,40,2,58,58,0,359,357,357,327,248,207,92,120,124,148,120,120,145,128,120,122,139,188,209,212,222,238,209,205,202,221,232,249,316,359,0,8,20,0,0,359,318,296,283,264,209,93,122,176,120,172,171,122,138,172,176,124,123,178,124,124,180,124,124,180,180,208,229,270,322,334,359,0,86,61,58,32,60,56,42,46,62,57,42,15,0,359,331,330,319,319,310,331,328,318,300,246,187,160,196,218,234,262,280,334,359,0,88,56,2,54,63,6,12,56,51,9,6,38,52,60,0,54,54,2,49,52,0,0,0,359,328,298,266,214,193,93,120,120,148,120,118,147,120,122,172,209,212,238,209,210,233,251,312,359,0,16,16,-1,186,186,214,238,276,322,338,359,0,88,58,2,34,62,0,56,53,6,8,36,50,59,6,12,62,2,57,57,0,359,358,358,330,300,268,242,216,204,90,120,122,148,119,124,139,133,120,120,143,209,212,236,209,213,224,242,316,359,0,8,22,0,359,356,335,280,226,207,93,124,178,122,131,173,170,118,176,178,124,126,178,119,178,144,128,125,186,186,227,284,328,359,0,88,60,58,36,44,60,58,32,57,58,42,0,359,354,332,330,302,331,326,302,253,194,166,162,162,-1,50,50,2,62,2,34,48,61,6,0,359,358,359,0,58,57,0,60,4,10,52,52,-1,120,120,124,148,120,124,145,120,120,143,148,177,210,212,236,209,210,225,244,318,359,0,16,0,359,354,327,304,265,220,204,91,126,180,124,128,173,170,122,150,172,176,124,129,178,124,129,179,128,128,180,180,227,248,284,328,359,0,76,88,60,58,32,60,58,48,35,32,53,60,61,0,359,341,331,331,307,310,331,331,246,170,160,160,-1};
int maxIdx = 525;
int bpm=173;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}