#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,26944,27444,27544,27661,27778,27878,27978,28061,28178,28312,28612,28695,29913,29926,29927,29930,30747,30878,30879,30881,30981,31031,31048,31181,31298,31307,31308,31415,31532,31632,31729,31730,31732,32032,32099,32115,33250,33934,34201,34218,34401,34518,34635,34718,34835,34952,35052,35152,35452,35469,35502,35519,35536,36770,36783,36784,36787,37588,37735,37736,37738,37821,37888,37905,38021,38155,38164,38165,38272,38372,38488,38586,38587,38589,38889,38956,38972,40023,40523,40524,40641,41141,41258,41375,41491,41592,41692,41792,41892,42025,42292,42342,42409,43644,43656,43657,43660,44461,44592,44593,44595,44695,44745,44761,44895,44995,45014,45015,45112,45245,45329,45427,45428,45429,45729,45779,45812,45846,46897,47147,47764,47781,48115,48248,48348,48448,48549,48632,48749,48882,49183,49199,49249,49266,49633,49650,49833,50484,50497,50498,50501,51318,51448,51449,51451,51552,51635,51752,51869,51878,51879,51985,52102,52202,52299,52300,52302,52586,52636,52686,52703,53820,54505,54771,54788,54972,55072,55189,55305,55973,55989,57624,57641,57770,57771,58158,58325,59409,59414,59415,59426,60677,61345,61662,61678,61895,61962,62829,62846,64481,64498,64627,64628,65015,65182,66266,66271,66272,66283,67451,67951,67952,68069,68569,69686,69703,71338,71355,71484,71485,71872,72039,73123,73128,73129,73140,74525,75025,75026,82633,83133,83567,83784,84835,85335,85336,86053,86553,86987,87237,87771,87838,87871,88238,88738,88739,89507,90007,90424,90540,90541,90607,90674,91675,92175,92176,92910,93410,93827,94077,94611,94678,94695,95095,95595,95596,96364,96864,97297,97514,98565,98715,98949,98999,100150,100284,100684,100784,101969,102469,102470,103204,103704,104137,104257,104258,104371,105389,105889,105890,136604,137104,137221,137337,137421,137521,137638,137738,137838,137955,138272,138288,138305,138322,138355,139573,139586,139587,139590,140390,140537,140538,140541,140641,140707,140858,140958,140969,140970,141074,141191,141291,141370,141371,141375,141692,141758,141775,142826,142943,143026,143043,143994,144011,144278,144378,144494,144611,144695,144795,145128,145195,145212,146446,146459,146460,146463,147247,147394,147395,147397,147439,147440,147481,147482,147483,147548,147564,147698,147798,147814,147815,147931,148048,148148,148245,148246,148248,148532,148599,148615,148649,149683,150183,150184,150317,150817,150918,151034,151134,151235,151351,151451,151568,151685,151969,152002,152069,153287,153300,153301,153303,154104,154251,154252,154254,154354,154421,154555,154671,154685,154686,154788,154905,155005,155102,155103,155105,155389,155439,155455,155472,155506,156557,156807,157658,157674,157791,157908,158025,158091,158208,158308,158425,158542,158842,158926,158959,160160,160173,160174,160177,160978,161108,161109,161111,161211,161278,161411,161545,161553,161554,161645,161762,161862,161943,161944,161945,162262,162329,162346,163046,163063,163130,163430,163664,164565,164581,164831,164948,165632,165649,167284,167301,167430,167431,167818,167985,169052,169057,169058,169069,169853,170103,171321,171338,171505,171622,172489,172506,174141,174157,174351,174352,174675,174825,175943,175950,175951,175959,177110,177610,177611,177728,178228,179346,179363,180998,181013,181014,181014,181532,181698,182799,182806,182807,182816,184184,184684,184685,192293,192793,193227,193460,194494,194994,194995,195713,196213,196647,196880,197431,197514,197898,198398,198399,199150,199650,200083,200203,200204,200300,201335,201835,201836,202570,203070,203504,203737,204288,204371,204755,205255,205256,206023,206523,206957,207174,208225,208375,208575,208659,209810,209943,210344,210377,210427,211628,212128,212129,212880,213380,213797,213920,213921,214031,215065,215565,215566};
const int angles[] = {-1,180,180,181,208,202,180,174,148,149,180,176,120,120,0,359,332,335,359,0,0,6,19,32,24,0,0,359,354,332,336,359,0,0,2,42,62,65,90,90,180,183,208,204,180,174,148,155,180,177,175,156,146,120,120,0,359,333,335,359,0,0,2,22,32,30,0,0,359,354,330,337,359,0,0,4,44,60,61,61,-1,180,180,180,208,203,180,176,148,151,180,177,166,120,120,0,359,330,335,359,0,0,6,24,34,26,0,0,359,357,332,331,359,0,0,4,16,45,61,63,90,90,180,184,208,203,180,174,146,149,180,178,162,133,120,118,107,120,120,0,359,329,335,359,0,0,4,32,25,0,0,359,354,332,336,359,0,0,4,18,53,61,65,90,90,180,178,148,154,180,180,120,120,0,0,359,358,332,332,359,0,61,65,90,90,149,175,180,180,120,120,0,0,359,358,332,332,359,0,62,60,60,-1,180,180,180,118,120,0,0,359,358,331,332,359,0,61,61,61,-1,148,148,150,206,208,208,-1,120,120,122,180,180,156,148,148,148,-1,32,32,30,0,359,342,331,332,332,-1,60,60,63,0,0,24,34,32,32,-1,148,148,151,180,183,208,208,239,239,270,270,332,332,332,-1,32,32,30,0,359,331,332,332,-1,180,180,184,208,207,179,174,148,147,180,181,164,158,136,119,120,0,359,332,335,359,0,0,5,34,21,0,0,359,355,332,335,359,0,1,0,42,62,61,18,18,90,90,208,209,180,176,148,149,180,176,134,120,120,0,359,332,335,359,0,0,0,359,359,359,0,20,32,25,0,0,359,356,332,336,359,0,0,4,26,48,61,61,61,-1,180,180,180,208,209,179,176,148,154,180,175,166,120,120,0,359,332,335,359,0,0,4,32,26,0,0,359,356,332,336,359,0,0,3,16,24,46,61,63,90,90,184,187,208,200,180,174,148,154,180,178,126,120,120,0,359,332,335,359,0,0,5,34,24,0,0,359,354,332,336,359,0,0,0,42,60,61,66,61,65,90,90,148,146,180,180,120,120,0,0,359,358,331,332,359,0,61,65,90,90,150,168,180,180,118,120,1,0,359,357,332,332,359,0,32,32,32,-1,180,180,180,120,120,0,359,359,358,331,332,359,0,32,32,32,-1,149,149,150,210,208,208,-1,120,120,120,180,180,148,148,148,-1,32,32,30,0,359,335,332,332,-1,62,62,58,0,0,32,32,32,-1,148,148,150,180,183,208,208,239,239,270,270,289,332,332,332,-1,32,32,30,0,359,332,332,332,-1};
int maxIdx = 559;
int bpm=140;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}