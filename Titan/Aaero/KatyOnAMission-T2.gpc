#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,6374,6874,7291,7374,7391,7708,7774,7841,8158,8275,8575,8692,8992,9109,9643,9760,9960,9977,9993,10043,10277,10291,10292,10294,10377,10394,10727,10811,11144,11178,11211,11278,11595,11695,12012,12129,12446,12513,13063,13197,13280,13297,13313,13363,13747,13764,14147,14248,14565,14615,14665,14681,14998,15148,15449,15566,15849,15949,15983,16483,16500,16550,16583,16700,16800,17084,17100,19937,20070,20137,20187,20237,20254,20571,20671,21104,21722,21738,22447,22448,23156,23290,23607,23674,23907,24024,24141,24238,24239,24241,24424,24675,25075,25209,25292,25342,26577,26677,27010,27110,27444,27477,27511,27895,28362,30080,30163,30247,30447,30547,30864,30948,31265,31298,31338,31339,31348,31365,31381,31715,31832,32149,32263,32264,32266,32273,32274,32382,32482,32616,32696,32697,32699,33000,33133,33333,33417,33517,33650,33767,33884,33900,33901,33984,34117,34218,34284,34384,34434,34518,34668,34685,35552,37070,37221,37304,37404,37521,37654,37754,37855,38522,38538,38539,38539,39039,39040,40540,40657,40741,40791,40867,40868,40874,40877,40878,40974,41041,41124,41222,41223,41224,41858,41858,41859,41875,43910,44027,44127,44244,44461,44478,44962,45112,45412,45529,45829,45929,46330,46346,46647,46680,46813,47114,47230,47614,47631,47931,47965,48098,48398,48515,48832,48915,49333,49349,49582,49583,50751,50901,50984,51082,51083,51084,51098,51099,51201,51318,51418,51516,51517,51518,52352,52352,52353,52369,54187,54304,54438,54521,54621,54738,54838,54938,55639,55655,55656,55656,55902,55903,57624,57758,57858,57955,57956,57958,58175,58175,58176,58191,58692,58825,59126,59239,59240,59242,59543,59643,60043,60052,60053,60060,60410,60524,60525,60527,60827,60927,61328,61337,61338,61345,61695,61809,61810,61812,62112,62212,62546,62629,62763,63263,63264,88389,88889,89106,89239,89556,89656,89957,90023,90090,90407,90507,90841,90924,91191,91241,91892,92025,92075,92109,92142,92426,92442,92976,93060,93393,93427,93477,93510,93677,93860,93961,94411,94428,95312,95429,95529,95595,95629,95996,96013,96413,96496,96596,96680,96697,97014,97047,97080,97147,97481,97581,98732,98782,98815,98832,98966,99066,99266,99416,102185,102302,102386,102436,102502,102786,103286,103287,103821,104321,105405,105539,105839,105939,106039,106173,106239,106290,106307,106308,106356,108842,109059,109259,109376,109610,109793,110227,110594,112245,112479,112696,112779,113013,113213,113513,113591,113592,113614,113647,113964,114081,114431,114448,114528,114529,114531,114615,114617,114618,114748,114848,114945,114946,114948,115248,115332,115349,115582,115666,115782,115899,115999,116133,116140,116141,116249,116366,116466,116533,116633,116800,116900,116934,117751,119336,119436,119553,119670,119770,119886,120003,120103,120771,120787,122489,122616,122617,122773,122889,122990,123073,123190,123323,123407,123505,123506,123507,124141,124141,124142,124157,126193,126310,126410,126510,126743,126760,127244,127394,127694,127794,128111,128211,128562,128578,128645,128662,128979,129079,129413,129496,129896,129913,130280,130380,130697,130781,131098,131214,131481,131498,132733,132799,132849,132867,132868,133066,133166,133266,133365,133366,133367,133381,133382,133483,133600,133717,133814,133815,133817,134635,134635,134636,134651,136470,136586,136703,136803,136920,137037,137137,137237,137921,137938,138184,138185,139906,140040,140140,140237,140238,140240,140457,140457,140458,140474,140974,141074,141408,141458,141522,141523,141525,141825,141925,142326,142334,142335,142342,142693,142806,142807,142809,143110,143210,143610,143618,143619,143627,143977,144075,144076,144077,144394,144494,144811,144928,145045,145545,145546,171872,172372,172956,173056,173123,174191,174324,174408,174508,174625,174741,174858,174942,175642,175659,176147,176148,177611,177744,177861,177942,177943,177945,177995,177996,178045,178178,178261,178360,178361,178362,178996,178996,178997,179012,181048,181181,181281,181381,181598,181615,182115,182249,182549,182649,182966,183066,183467,183483,183834,183951,184251,184334,184351,184751,184768,185118,185218,185535,185636,185969,186053,186336,186353,187587,187654,187704,187737,187738,187904,188038,188138,188235,188236,188238,188244,188245,188355,188455,188555,188653,188654,188655,188822,189322,189323,189340,189840,191325,191475,191558,191658,191775,191875,191992,192092,192776,192793,193121,193122,194761,194895,194995,195092,195093,195095,195295,195295,195296,195312,195829,195963,196280,196355,196356,196363,196627,196628,196680,196681,196682,196713,196780,197180,197189,197190,197197,197547,197661,197662,197664,197981,198081,198465,198473,198474,198482,198832,198930,198931,198932,199249,199333,199349,199683,199733,199766,199900,200400,200401};
const int angles[] = {-1,180,180,178,154,146,146,182,208,206,180,178,148,145,120,123,148,148,138,121,88,90,0,359,347,347,180,178,146,151,166,188,208,206,180,176,148,144,118,124,148,146,139,122,90,90,180,178,148,146,183,223,239,238,208,207,180,178,154,148,146,144,108,90,93,117,120,180,181,208,204,190,158,148,149,124,120,120,1,0,359,358,332,326,301,306,332,337,359,0,0,4,32,29,0,0,32,29,0,4,32,36,50,61,56,32,30,16,0,2,32,36,60,60,42,0,359,350,339,298,304,332,335,359,0,0,0,359,352,330,340,359,0,0,2,32,32,60,62,32,26,0,0,359,357,332,328,298,299,284,250,200,192,180,183,208,207,180,186,208,200,180,180,359,0,0,0,359,358,332,336,354,359,0,0,0,359,346,332,331,359,0,0,0,0,359,180,182,208,207,180,180,239,236,208,208,180,181,148,148,208,208,210,180,176,148,148,208,208,211,180,176,148,147,120,120,0,0,359,357,332,331,359,0,0,0,359,356,332,334,359,0,0,0,0,359,180,182,210,200,180,182,210,209,180,180,359,0,0,0,359,356,332,338,359,0,0,0,0,359,301,305,332,333,359,0,0,0,32,32,0,359,332,334,359,0,0,0,32,32,0,359,332,335,359,0,0,3,32,35,60,60,60,-1,146,146,149,180,176,148,146,184,208,209,180,176,148,148,120,123,148,148,126,90,90,180,178,148,148,181,208,239,236,201,180,180,120,120,148,148,104,90,90,180,176,148,146,217,270,270,258,240,206,209,180,177,164,140,119,124,146,152,180,182,210,205,190,149,148,148,-1,359,359,358,331,328,301,305,332,335,348,359,0,32,28,0,4,32,36,60,57,32,34,0,4,32,33,60,60,0,359,342,301,300,328,336,346,359,0,0,0,0,359,332,338,359,0,0,4,27,34,32,60,58,32,31,0,0,359,352,331,323,300,301,240,208,194,180,183,209,208,180,184,208,202,180,180,0,4,0,359,354,332,335,357,356,332,331,359,0,0,0,0,359,180,182,208,208,180,180,239,237,208,209,180,178,146,148,290,290,209,209,180,176,148,148,208,204,180,176,149,145,120,119,0,4,8,0,0,359,354,332,331,359,0,0,0,359,356,332,340,359,0,0,0,0,359,180,182,210,203,180,186,208,204,180,180,0,0,359,356,332,337,359,0,0,0,0,359,301,304,334,332,348,359,0,0,2,32,32,0,359,330,333,359,0,0,0,32,32,0,359,330,333,359,0,0,0,32,35,60,60,60,-1,180,180,180,148,180,182,208,208,180,184,208,204,182,180,0,0,359,358,332,340,359,0,0,0,359,359,332,331,359,0,0,0,0,359,180,182,208,204,180,180,239,236,208,209,180,181,148,148,208,206,180,178,153,146,148,208,209,180,180,149,144,120,120,0,3,8,0,0,359,357,332,337,359,0,0,0,359,351,332,333,359,0,0,0,0,-1,180,180,182,208,204,180,186,210,203,180,180,0,0,359,357,332,337,359,0,0,0,0,359,299,304,332,334,359,0,2,0,359,359,359,0,12,32,32,0,359,332,334,359,0,0,4,32,32,0,359,330,332,359,0,0,3,27,34,31,51,63,60,60,-1};
int maxIdx = 713;
int bpm=140;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}