#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,4305,4805,4805,5305,5306,6707,7207,7207,7707,7708,9110,9610,9610,10110,10111,11512,12012,12012,12512,12513,13848,14348,14348,14848,14849,16283,16783,16783,17283,17284,18669,19169,19169,19669,19670,59510,60010,61283,61284,61295,61712,61795,62362,62379,62913,62980,63580,63847,64064,64114,64214,64248,64348,64401,64402,64515,64548,64681,64781,64815,65249,65365,65382,65949,66016,66216,66383,66450,66517,66533,66633,66700,66758,66759,66767,66834,66950,67067,67167,67618,67634,67718,67734,68335,68402,68418,68702,68769,68836,68986,69052,69119,69152,69169,69186,69453,69459,69460,69586,69603,70876,70877,70888,71321,71388,71922,71955,71972,72189,72206,72256,72523,72556,72589,73190,73640,73690,73790,73824,73874,73907,73941,74001,74002,74091,74124,74208,74341,74408,74858,74992,75559,75609,75826,75943,76026,76109,76143,76243,76363,76364,76410,76443,76476,76543,76593,76643,76810,77244,77294,77327,77394,77928,77978,78011,78328,78412,78896,79112,79146,79646,79647,81065,81565,81565,82065,82066,83467,83967,83967,84467,84468,85870,86370,86370,86870,86871,88272,88772,88772,89272,89273,116517,117017,117451,117452,117484,117601,119119,119436,119953,119970,121471,121688,121712,121713,121822,122322,122404,122405,122406,122781,122782,123907,124074,124107,124174,124741,124758,124791,124808,126210,126343,127127,127211,128729,129062,129563,129580,131098,131415,131915,131999,133517,133667,133700,133750,133767,134334,134351,134368,134384,134394,134395,134401,135853,135903,136787,137154,138305,138639,139156,139173,140674,140824,140910,140911,141008,141525,141590,141591,141592,141971,141972,143110,143277,143327,143377,143927,144011,145179,145195,146380,146747,147948,148248,148732,148749,148782,148799,150300,150534,150584,151134,151168,151201,152703,152853,152986,153537,153554,153604,154721,154819,154820,154821,155422,155689,155873,155877,155878,155889,156273,157262,157263,157274,157624,157791,158358,158375,158926,158976,159593,160043,160277,160310,160360,160400,160401,160427,160444,160494,160527,160561,160661,160777,160811,161245,161345,161378,161962,162012,162229,162312,162446,162479,162546,162579,162696,162745,162746,162746,162846,162863,162963,163063,163130,163163,163647,163697,163714,163730,163814,164348,164364,164414,164715,164781,164798,164982,165065,165082,165098,165148,165165,165182,165382,165452,165453,165465,165549,165582,166750,166767,166783,166800,166854,166855,167234,167417,167918,167951,167968,168519,168585,169186,169586,169720,169803,169837,169953,169999,170000,170053,170070,170137,170170,170254,170287,170320,170404,170687,170704,170821,170838,170871,170988,171538,171622,171822,171955,172039,172089,172105,172222,172322,172356,172357,172389,172456,172472,172556,172706,172723,172823,173257,173290,173323,173390,173924,173941,174007,174541,174608,175259,177544,178044,178045};
const int angles[] = {-1,225,225,225,225,-1,315,315,315,315,-1,90,90,90,90,-1,270,270,270,270,-1,135,135,135,135,-1,45,45,45,45,-1,270,270,270,270,-1,302,302,359,0,0,0,34,32,90,90,120,122,180,234,252,282,298,330,359,0,62,82,131,166,180,180,233,241,241,210,209,162,142,104,90,51,24,0,359,356,328,263,223,182,179,248,248,267,270,220,209,212,226,239,240,211,161,124,111,90,2,0,359,310,302,359,0,0,0,34,32,54,90,90,96,90,92,105,120,122,226,244,272,290,304,320,327,359,0,48,70,106,155,180,185,238,236,208,209,170,147,108,86,48,0,359,341,328,302,265,250,230,180,180,206,256,270,270,234,210,212,239,147,101,96,96,-1,315,315,315,315,-1,90,90,90,90,-1,270,270,270,270,-1,90,90,90,90,-1,274,274,359,0,6,33,28,0,0,60,62,6,0,359,330,331,359,0,0,0,359,358,310,294,270,270,240,240,180,180,209,209,180,183,209,209,148,150,208,208,180,183,226,244,259,270,270,296,312,312,359,0,31,34,0,3,32,30,0,0,62,60,22,0,359,334,331,359,0,0,0,359,358,309,288,270,270,208,209,146,152,180,184,209,208,219,219,149,149,214,240,239,224,180,181,222,270,270,290,334,331,359,0,0,2,26,26,0,359,301,316,359,0,0,3,34,34,90,90,120,124,227,306,319,338,359,0,14,20,54,68,88,125,168,180,181,224,242,236,208,209,178,148,118,88,70,30,0,359,359,326,306,257,222,198,180,181,214,244,262,270,268,238,208,208,231,242,241,202,184,176,129,104,90,30,0,359,354,328,298,302,313,313,359,359,0,3,32,32,52,90,90,120,122,212,254,278,294,337,359,0,25,44,74,93,124,132,147,180,180,90,90,182,190,240,236,209,209,168,148,118,102,55,15,0,359,345,318,300,260,210,197,180,186,208,256,270,270,264,210,210,238,235,92,92,-1};
int maxIdx = 428;
int bpm=100;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}