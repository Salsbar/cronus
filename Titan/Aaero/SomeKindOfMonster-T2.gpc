#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,32566,33066,33531,33532,33700,33817,35886,36270,36386,36403,36436,36503,36537,36583,36584,36637,36653,36687,36703,36787,36870,37070,37087,37187,37654,37921,39990,40213,40214,40374,40440,40490,41291,41542,41735,41736,41925,42025,44077,44294,44461,44611,44695,44745,44791,44792,44845,44862,44962,45028,45078,45262,45279,45395,45863,46146,47130,47630,47631,48966,49466,49947,49948,49983,50234,52302,52536,52669,52819,52853,52953,52986,52989,52990,53036,53053,53103,53153,53287,53470,53487,53604,54121,54338,56406,56622,56623,56790,56890,57691,58148,58149,58292,58442,60494,60661,60878,60961,61011,61094,61161,61195,61197,61198,61245,61261,61295,61328,61428,61495,61995,61996,62046,62546,62546,63046,63047,63080,63580,63580,64080,64081,65149,65649,65782,65832,66049,66164,66165,66166,66867,67284,67718,68952,69303,69770,69903,70103,70170,70220,70720,70721,71272,71772,72439,72456,72773,73273,73274,73374,73874,73957,74074,74241,74374,74942,75125,75375,75475,75492,75692,75909,76065,76066,77160,77511,77861,77878,78411,78561,78578,79078,79079,79480,79980,79980,80480,80481,81565,82065,82165,82232,82349,82515,82563,82564,82565,83283,83683,84134,85352,85719,86169,86319,86536,86636,87136,87137,87688,88188,88188,88688,88689,88705,89205,89205,89705,89706,89757,90257,90261,90262,90390,90407,90540,90707,90774,91308,91524,91691,91858,92008,92292,92325,92481,92482,93577,93910,94327,94827,94828,131031,131531,131598,131631,131990,131991,132065,132299,134334,134534,134751,134851,134951,135001,135041,135042,135051,135101,135118,135201,135335,135518,135535,135652,136286,136419,138455,138672,138673,138822,138939,139756,140199,140200,140223,140490,142559,142926,143026,143093,143126,143209,143226,143249,143250,143326,143343,143393,143510,143727,143743,143843,144444,144611,145579,146079,146080,147431,147931,148398,148399,148448,148715,150750,151101,151284,151351,151401,151451,151452,151518,151534,151585,151668,151751,151935,151952,152068,152636,152802,154854,155078,155079,155238,155322,155372,156139,156610,156611,156640,156907,158959,159326,159426,159492,159526,159609,159654,159655,159676,159693,159743,159876,159960,160460,160461,160511,161011,161678,161695,162012,162512,162513,163597,164097,164230,164297,164447,164547,164608,164609,164614,165332,165632,166132,166166,167417,167767,168235,168385,168568,168652,168685,169185,169186,169737,170237,170237,170737,170738,170754,171254,171254,171754,171755,171839,172339,172422,172539,172706,172822,173356,173573,173790,173957,174057,174341,174374,174530,174531,175625,175976,176426,176610,176776,176876,177376,177377,177928,178428,178428,178928,178929,180013,180513,180614,180714,180931,181029,181030,181031,181206,181207,181731,181737,181738,182048,182582,183817,184167,184634,184784,185085,185585,185586,186136,186636,186636,187136,187137,187154,187654,187654,188154,188155,188222,188722,188822,188855,188905,189122,189239,189739,189990,190140,190240,190357,190390,190557,190774,190930,190931,192025,192375,192792,193292,193293};
const int angles[] = {-1,270,270,359,0,32,59,122,226,270,273,290,319,330,359,0,33,50,65,80,118,150,150,268,266,178,118,60,0,359,316,288,273,274,320,359,0,38,62,118,176,222,274,315,330,359,0,34,52,108,132,156,156,270,264,178,118,90,90,-1,270,270,359,0,6,63,123,185,222,275,292,331,358,359,0,22,41,74,99,156,156,270,266,166,116,58,0,359,314,277,272,359,0,27,62,122,161,221,254,270,308,334,358,359,0,24,43,60,83,128,154,154,-1,270,270,270,270,-1,356,356,356,356,-1,183,183,226,254,322,359,0,0,2,98,180,184,209,212,261,318,332,346,346,-1,270,270,270,356,356,356,-1,351,351,328,274,220,182,248,268,188,148,135,64,0,0,359,356,331,328,313,258,206,195,195,-1,356,356,356,356,-1,186,186,213,246,290,341,359,0,0,4,96,180,182,209,210,263,322,350,350,-1,356,356,356,356,-1,356,356,356,356,-1,1,1,0,359,318,305,256,205,180,243,270,218,160,95,7,0,0,359,356,331,331,331,-1,272,272,276,290,359,0,14,62,120,170,234,270,316,332,359,0,6,34,53,100,154,154,270,266,142,118,57,0,359,320,277,276,359,0,4,60,122,222,260,283,300,330,345,359,0,48,64,93,144,148,270,268,151,118,91,91,-1,270,270,359,0,9,62,121,212,278,310,328,359,0,41,58,86,124,158,158,269,264,155,120,58,0,359,318,285,273,270,359,0,5,62,120,218,257,280,296,329,359,0,14,20,62,127,156,156,-1,270,270,270,356,356,356,-1,180,180,221,254,306,332,359,0,2,2,74,176,180,184,209,214,270,318,340,348,348,-1,270,270,270,270,-1,356,356,356,356,-1,349,349,326,272,221,180,242,270,204,136,94,8,0,0,359,356,331,329,265,222,194,194,-1,356,356,356,356,-1,180,180,210,257,325,359,0,0,0,359,358,359,0,75,180,182,209,212,266,348,348,-1,356,356,356,356,-1,356,356,356,356,-1,358,358,327,316,288,218,180,240,268,222,191,144,124,66,0,0,359,356,331,332,332,-1};
int maxIdx = 458;
int bpm=<$BMP>;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}