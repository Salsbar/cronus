#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,11153,11653,11903,11970,12237,12337,13104,13822,14456,14806,15757,15840,16441,16491,16541,17826,18326,18327,18711,19211,19377,20228,20428,21263,21379,21396,21813,21963,22280,22347,22614,22697,23615,24115,24116,24183,24683,24849,25550,25734,27252,27335,27402,29154,29654,29655,33092,33592,33842,33909,34175,34276,35060,35727,35810,35811,36394,36745,37712,37796,38380,38479,38480,38480,39781,40281,40282,40649,41149,41416,41449,41499,42167,42350,43201,43277,43278,43351,43969,44219,44302,44569,44636,45604,46104,46105,46138,46638,46738,46788,47656,47822,48390,48707,48857,49691,49791,50725,50825,51476,51793,53478,53978,53979,55047,55547,55730,55780,57365,57382,57632,57866,58400,58667,59517,59668,60285,60302,60902,61453,62420,62587,63054,63104,63154,63838,64139,65106,65606,65607,67393,67893,68159,70245,70745,70746,74266,74766,74849,74950,75400,75500,75967,76134,79154,79654,79655,85227,85727,85794,85894,86378,86461,86928,87095,88647,89147,89148,99541,100041,100041,100541,100542,100909,101409,101409,101909,101910,102277,102777,102777,103277,103278,103662,104162,104162,104662,104663,105030,105530,105530,106030,106031,106398,106898,106898,107398,107399,107750,108250,108250,108750,108751,109134,109634,109634,110134,110135,110502,111002,111002,111502,111503,111870,112370,112370,112870,112871,113238,113738,113738,114238,114239,114623,115123,115123,115623,115624,115991,116491,116491,116991,116992,120863,121363,121546,121613,123181,123198,123431,123682,124232,124482,125283,125483,126101,126117,126718,127269,128253,128403,128887,128954,128970,129688,129955,130922,131422,131423,133208,133708,133975,136077,136577,136578,140065,140565,140715,141233,141316,141800,141967,143184,143191,143192,143201,143552,143618,143885,143969,144769,145453,145558,145559,146087,146438,147439,147505,148089,148156,148172,148173,148173,149474,149974,149975,150359,150859,151026,151877,152043,152911,152979,152980,153061,153428,153595,153929,153995,154262,154312,154362,155263,155763,155764,155831,156331,156498,157199,157365,158900,158979,158980,159067,160785,161285,161286,164740,165240,165507,165574,165824,165924,166625,167125,167126,170229,170729,170979,171046,171296,171363,171396,172080,172580,172581,172981,173481,173632,174149,174232,174716,174883,176101,176108,176109,176117,176468,176501,176568,176801,176868,176885,177602,178102,178103,181190,181690,181957,182023,182290,182374,183041,183541,183542};
const int angles[] = {-1,148,148,148,119,122,149,152,180,184,209,209,238,239,213,180,180,180,-1,211,211,239,236,209,209,162,149,152,180,180,149,149,119,119,119,-1,183,183,239,236,209,209,181,150,149,149,-1,31,31,31,61,61,31,28,0,0,359,356,331,331,301,301,359,0,0,0,0,-1,331,331,331,310,301,303,331,331,359,0,27,0,0,32,34,60,60,60,-1,352,352,322,300,303,331,328,293,270,270,239,239,212,206,180,180,180,-1,209,209,213,240,239,151,155,180,184,210,213,239,239,180,185,210,213,239,239,216,180,177,149,149,149,-1,211,211,239,239,239,-1,221,221,257,270,270,302,305,331,331,331,-1,324,324,292,270,265,239,236,209,209,209,-1,225,225,225,225,-1,45,45,45,45,-1,315,315,315,315,-1,135,135,135,135,-1,45,45,45,45,-1,225,225,225,225,-1,135,135,135,135,-1,315,315,315,315,-1,225,225,225,225,-1,45,45,45,45,-1,315,315,315,315,-1,135,135,135,135,-1,45,45,45,45,-1,209,209,213,240,239,150,152,180,184,210,212,239,239,180,184,209,213,240,240,200,181,179,149,149,149,-1,211,211,239,239,239,-1,212,212,270,273,301,304,331,331,359,0,32,33,61,60,31,26,0,0,359,357,331,328,302,303,342,359,0,0,0,0,-1,329,329,301,305,331,333,359,0,31,29,0,4,31,31,51,61,61,61,-1,356,356,301,305,331,331,359,0,31,31,31,-1,149,149,146,119,119,149,149,149,-1,149,149,148,119,119,133,149,149,149,-1,210,210,271,270,301,304,331,331,359,0,31,31,47,61,60,42,31,31,31,-1,31,31,34,61,57,31,31,31,-1};
int maxIdx = 365;
int bpm=<$BMP>;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}