#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,22039,22539,23607,23941,24274,24291,24308,24358,24775,24791,26043,26343,26693,27010,27027,27177,27277,27361,27461,27528,27758,27759,27761,27911,27913,27914,28011,28076,28077,28078,29162,29479,29813,29863,29880,29913,30314,30330,31565,31882,32082,32583,32683,32699,32716,32733,32749,32916,33016,33033,33050,33083,33100,33150,33183,33281,33282,33283,33301,33302,33467,33550,33632,33633,33634,34668,35002,35352,35369,35452,35853,35869,37104,37421,37788,38121,38405,38422,38505,38655,38868,38869,38872,39006,39008,39009,39106,39187,39188,39189,40224,40541,40908,40974,40991,41408,41425,42659,42976,43177,43677,43777,43827,43861,44027,44127,44144,44211,44244,44278,44392,44393,44394,44545,44547,44548,44628,44678,44726,44727,44728,45729,45729,45730,45746,45761,45762,45762,46096,46446,46463,46547,46964,46980,48198,48515,48882,49016,49216,49333,49516,49533,49583,49616,49733,49947,49948,49950,49991,49992,50117,50200,50282,50283,50284,50784,50785,50786,50801,50831,50832,50834,51335,51652,52002,52069,52085,52119,52503,52519,54104,54254,54288,54488,54588,54612,54613,54838,54988,55138,55222,55239,55289,55322,55405,55422,55455,55487,55488,55489,55835,55836,56874,56990,57024,57090,57224,57291,58258,58340,58341,58342,58992,58993,59643,59776,59860,59960,60077,60410,60527,60677,60678,60679,60794,60811,60861,60894,60978,61028,62412,62563,62579,62763,62863,63814,63897,65199,65332,65365,65516,65699,65707,65708,65883,66066,66216,66316,66350,66366,66533,66567,66614,66615,66617,66650,66651,66750,66850,66884,66915,66916,66917,67968,68285,68635,68685,68735,69152,69169,69820,70420,70721,71088,71405,71421,71688,71722,71788,71905,72152,72153,72155,72192,72193,72306,72372,72406,72470,72471,72472,73540,73841,74208,74291,74708,74725,75359,75959,76243,76260,76426,76443,76960,77060,77094,77160,77311,77377,77394,77411,77544,77628,77678,77708,77709,77711,79062,79063,79064,79246,79413,79496,80447,80514,80531,81181,81182,81832,81833,81834,81949,81999,82032,82182,82332,82382,82583,82866,82874,82875,82966,82983,83033,83066,83150,83166,83217,84618,84785,84968,85052,86003,86069,86153,87387,87487,87521,87671,87821,87888,87902,87903,88005,88038,88222,88405,88505,88522,88572,88605,88672,88770,88771,88772,88847,88848,88922,89039,89117,89118,89122,89623,89624,89625,89640,89670,89671,89673,90174,90490,90841,90924,90941,91358,91375,92042,92593,92910,93277,93610,93777,93894,93911,93994,94044,94178,94341,94342,94344,94381,94382,94494,94595,94659,94660,94661,95729,96029,96380,96413,96496,96914,96930,97731,98165,98465,98665,99183,99266,99283,99299,99349,99533,99633,99650,99700,99733,99766,99783,99816,99833,99850,100350,100351,106257,106757,106757,107257,107258,107591,108091,108091,108591,108592,109126,109626,109626,110126,110127,110478,110978,111144,111145,111146,111195,111245,111342,111343,111345,112379,112679,112829,113013,113080,113130,113547,113564,114798,115115,115482,115782,115866,116049,116099,116116,116216,116250,116366,116547,116548,116550,116587,116588,116700,116767,116817,116865,116866,116867,117918,118235,118585,118619,118669,118685,119102,119119,120354,120654,120854,121371,121471,121538,121722,121788,121822,121872,121955,122070,122071,122072,122239,122240,122241,122289,122339,122404,122405,122406,123473,123790,124141,124208,124224,124258,124641,124658,125909,126193,126326,126577,126894,126910,127211,127261,127394,127427,127641,127642,127644,127681,127682,127794,127895,127959,127960,127961,129012,129329,129696,129763,129780,130197,130214,131782,131882,131932,131965,132165,132291,132292,132316,132466,132599,132816,132900,132916,132966,133000,133050,133083,133133,133165,133166,133166,134568,134569,134570,134735,134902,135002,135953,136034,136035,136036,137321,137322,137323,137471,137504,137754,137905,137921,137955,138138,138355,138365,138366,138438,138472,138522,138555,138622,138655,138722,140090,140224,140257,140340,140457,140557,141491,141575,142876,143010,143043,143126,143396,143397,143410,143443,143577,143694,143894,143994,144111,144144,144178,144276,144277,144278,144319,144320,144444,144511,144561,144609,144610,144611,145662,145979,146346,146363,146380,146430,146847,146864,147464,148098,148398,148665,148765,149099,149266,149366,149449,149583,149750,149765,149766,149766,149802,149803,149983,150083,150165,150166,150167,151218,151535,151885,151969,151985,152402,152419,153053,153654,153937,154021,154154,154671,154738,154771,154788,154838,155005,155088,155205,155370,155371,155372,155545,155546,156757,156890,156924,157090,157157,157224,158158,158223,158224,158225,158550,158551,159526,159660,159693,159860,160010,160093,160194,160410,160544,160558,160559,160661,160694,160744,160777,160861,160894,160911,162312,162446,162462,162646,162696,162763,163697,163780,165082,165199,165315,165499,165592,165593,165599,165766,165933,166049,166166,166233,166250,166333,166464,166465,166466,166507,166508,166633,166733,166815,166816,166817,167071,167072,167835,167851,167872,167873,167935,168168,168502,168569,168619,169036,169052,169620,170287,170604,170971,171288,171438,171622,171738,171805,171955,171971,171972,171972,172008,172009,172189,172272,172354,172355,172356,173390,173724,174091,174174,174591,174608,175209,175826,176126,176176,176343,176860,176960,176977,177010,177027,177194,177311,177344,177394,177411,177511,177528,178028,178029};
const int angles[] = {-1,0,0,4,28,3,16,22,52,52,180,176,149,179,122,121,176,210,254,292,318,359,0,0,0,0,359,336,359,0,0,4,30,2,26,42,55,55,180,178,120,180,183,203,194,176,168,148,180,217,226,245,260,274,294,312,359,0,0,0,359,355,332,359,0,0,0,60,6,6,53,53,178,178,120,178,122,222,238,272,324,359,0,0,0,0,359,335,359,0,0,0,60,2,34,49,49,181,180,116,180,182,207,170,150,182,224,242,279,292,310,359,0,0,0,0,359,340,344,359,0,0,0,0,359,347,359,0,0,62,4,4,54,54,180,178,122,175,156,121,160,230,244,262,279,318,359,0,0,0,359,358,334,359,0,0,0,0,359,354,359,0,0,4,60,0,30,46,53,53,180,183,234,251,318,350,359,0,88,133,184,220,239,264,284,320,326,346,359,0,0,0,359,358,327,306,302,304,328,332,359,0,0,0,359,359,317,282,248,213,86,51,0,0,359,303,286,264,244,210,180,180,226,240,239,208,208,180,183,224,242,296,356,359,0,68,128,176,218,239,258,332,349,359,0,0,0,359,358,331,346,359,0,0,0,60,7,16,43,43,208,196,176,120,178,122,122,218,238,268,312,359,0,0,0,359,358,340,338,359,0,0,4,62,0,46,46,208,196,176,124,117,169,183,182,199,192,151,173,173,222,222,292,330,354,359,0,0,0,0,359,301,304,330,332,350,359,359,0,0,0,359,324,306,290,238,188,168,94,3,0,359,320,301,276,256,220,214,180,182,239,234,209,209,186,180,180,208,225,283,328,354,359,0,38,54,116,173,214,233,259,280,310,359,0,0,0,359,359,334,359,0,1,0,0,359,353,359,0,0,2,62,0,42,54,54,208,194,178,120,179,120,180,220,236,268,292,329,359,0,0,0,359,358,335,359,0,0,4,62,6,6,54,54,208,192,176,120,180,184,209,199,181,150,182,234,252,274,294,306,318,328,342,348,348,-1,356,356,356,356,-1,184,184,184,184,-1,356,356,356,356,-1,0,0,0,0,359,344,337,359,0,0,4,58,38,6,18,45,45,180,178,120,178,122,138,206,224,240,278,296,328,359,0,0,0,359,358,340,344,359,0,0,3,60,6,12,38,52,52,180,176,118,180,181,204,146,183,208,235,266,304,359,0,0,0,0,359,344,336,359,0,0,2,60,0,31,46,53,53,180,176,122,136,180,121,120,232,260,308,322,359,0,0,0,359,358,336,359,0,0,2,61,4,35,51,51,180,182,212,230,248,316,359,0,8,67,112,179,214,233,259,280,300,320,343,359,0,0,0,0,359,302,302,332,334,359,0,0,0,0,359,317,298,218,160,156,136,72,4,0,359,330,303,278,257,226,216,180,180,214,233,238,234,208,208,180,181,221,240,270,359,0,4,20,70,110,172,216,282,296,318,359,0,0,0,359,358,341,344,359,0,0,4,60,2,16,20,50,50,208,196,176,122,162,180,119,180,213,259,310,314,359,0,0,0,359,357,332,359,0,0,2,60,0,41,55,55,208,196,176,122,137,180,181,199,203,184,149,180,206,283,359,0,0,0,359,356,314,300,302,322,332,335,359,0,0,0,359,358,319,300,241,190,162,120,49,6,0,359,314,286,264,244,210,188,180,184,225,240,238,222,208,208,180,182,218,268,326,359,0,2,68,124,159,204,242,260,298,359,0,0,0,359,358,334,359,0,0,0,359,358,354,359,0,16,60,6,16,45,45,208,198,176,121,178,118,169,242,294,316,316,359,0,0,0,359,357,332,359,0,0,0,60,0,47,47,208,196,180,122,128,180,180,206,188,162,146,180,228,256,278,292,332,346,346,-1};
int maxIdx = 814;
int bpm=<$BMP>;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}