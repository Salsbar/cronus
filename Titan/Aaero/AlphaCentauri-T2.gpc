#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,38356,38856,39056,39223,39289,39373,39406,39506,39564,39565,39606,39623,39640,39690,39723,39806,40224,40324,40674,40757,40774,40974,41141,41175,41258,41291,41425,41458,41459,41508,41575,41692,41758,42242,42693,42893,43043,43110,43360,43403,43404,43477,43493,43560,43644,44061,44161,44561,44578,44628,44895,45145,45512,45546,45562,46547,46747,46897,46964,47097,47197,47241,47242,47347,47381,47481,47898,47998,48398,48415,48448,48665,48815,48882,48932,49032,49082,49137,49138,49183,49199,49233,49266,49316,49433,49950,50384,50567,50667,50734,50767,50918,51034,51068,51087,51088,51134,51168,51218,51268,51335,51735,51852,52236,52286,52419,52569,52836,53203,53253,54221,54571,54638,54721,54755,54855,54898,54899,54972,54988,55038,55055,55189,57107,57140,57174,57674,58091,58375,58408,58442,58559,58592,58675,58692,58709,58725,58739,58740,58759,58825,58842,58892,58926,59042,60944,60978,61078,61178,61345,61378,61379,61380,61445,61745,61762,61895,62246,62462,62496,62529,62546,62579,62584,62585,62713,62796,62880,64781,64798,64815,64831,65349,65766,66099,66183,66283,66316,66366,66419,66420,66433,66450,66500,66550,66667,66733,67684,68001,68035,68168,68643,68644,68669,68819,69069,69569,69570,99800,100300,100484,100651,100701,100767,100784,100817,100951,100979,100980,101034,101068,101118,101218,101285,103187,103203,103220,103237,103754,104137,104354,104505,104538,104621,104638,104771,104818,104819,104905,104922,105022,105122,107024,107074,107090,107841,107858,108008,108275,108392,108475,108525,108625,108659,108662,108663,108692,108759,108825,108926,108942,110878,110894,110928,111445,111828,112179,112246,112379,112412,112462,112504,112505,112563,112579,112696,112796,114715,114765,115232,115732,115733,122840,123340,123473,123558,123559,123640,123724,123757,123941,124007,124074,124174,124258,124308,124708,124791,125192,125225,125259,125469,125470,125475,125592,125626,125676,125742,125843,125893,125976,125993,126026,126076,126226,126743,127177,127394,127395,127411,127511,127594,127644,127711,127828,127911,127928,127978,128028,128128,128545,128645,128996,129079,129112,129379,129630,129997,130030,130047,131031,131231,131240,131241,131348,131448,131632,131732,131815,131865,131965,132366,132499,132866,132883,132900,132933,133100,133157,133158,133267,133383,133584,133667,133684,133717,133750,133851,133917,134351,134852,135052,135076,135077,135202,135269,135319,135352,135536,135636,135652,135752,135819,136220,136336,136703,136737,136770,137037,137304,137671,137704,137721,138705,138872,138916,138917,139072,139122,139239,139289,139339,139406,139423,139439,139506,139540,139673,141592,141608,141642,142159,142576,142755,142756,142893,142926,143060,143093,143177,143227,143260,143327,143410,143527,145412,145445,145505,145506,145579,145596,145679,145779,145829,145863,145929,146230,146246,146380,146600,146601,146730,146864,146914,147030,147130,147147,147197,147231,147347,149216,149283,149316,149833,150217,150437,150438,150567,150667,150684,150817,150868,150951,150968,151018,151034,151185,151235,152169,152284,152285,152452,152619,153153,153537,153554,154054,154055,184285,184785,185001,185002,185118,185219,185319,185352,185402,185452,185469,185502,185536,185586,185669,185752,187671,187688,187721,188222,188639,188828,188829,188972,189006,189189,189256,189323,189339,189356,189406,189439,189556,189623,191475,191525,191542,191575,192326,192342,192476,192601,192602,192809,192860,192943,192976,193060,193110,193193,193210,193310,193427,193544,195345,195395,195412,195929,196296,196512,196513,196663,196697,196747,196763,196813,196847,196947,197030,197047,197164,197264,197347,199183,199249,199633,200133,200134};
const int angles[] = {-1,120,120,176,224,254,284,300,331,359,0,20,26,45,67,86,116,120,148,146,127,122,173,224,242,270,288,338,359,0,32,77,128,148,145,120,175,214,249,338,359,0,36,54,86,119,123,149,146,132,120,124,148,148,130,118,124,178,222,252,302,336,359,0,55,76,118,120,148,145,132,121,178,222,254,270,315,330,359,0,24,44,68,81,110,149,145,122,170,202,220,238,296,336,349,359,0,24,47,76,98,120,122,148,146,124,120,124,148,144,120,120,219,250,280,298,333,359,0,44,62,85,98,148,146,110,90,94,128,207,216,235,278,296,325,330,344,350,359,0,12,54,70,92,110,148,152,160,202,274,338,359,359,0,32,32,118,118,215,304,318,328,343,356,359,0,86,121,148,145,144,106,90,94,128,219,259,296,313,326,359,0,8,14,52,85,133,148,152,229,242,274,359,0,4,36,86,86,-1,122,122,169,219,243,270,272,290,341,359,0,34,59,90,128,148,146,132,104,90,94,120,179,224,243,270,284,331,359,0,52,70,116,149,146,102,90,90,148,151,212,252,277,300,336,358,359,0,12,62,96,96,148,147,111,90,95,122,222,252,302,318,336,359,0,32,56,114,149,147,90,90,90,-1,56,56,23,0,359,337,306,288,222,200,166,108,72,60,57,31,32,52,58,0,359,358,324,314,288,266,222,205,158,138,122,88,31,35,58,0,359,355,330,290,276,246,209,162,158,128,100,60,57,32,34,54,60,56,32,32,54,62,56,2,0,359,331,285,220,177,129,98,64,61,32,32,37,50,58,16,0,359,328,279,199,150,130,114,94,53,32,36,61,6,0,359,326,291,271,263,194,144,127,82,60,58,32,36,46,62,58,32,32,46,62,58,13,0,359,312,286,244,223,204,164,158,136,102,81,34,35,58,90,86,50,0,359,321,302,252,236,207,172,156,106,67,32,28,24,0,359,330,306,257,222,197,178,148,148,60,60,0,359,324,270,244,199,136,117,94,76,32,32,61,90,87,60,0,359,324,284,271,220,198,151,130,104,90,37,32,28,0,359,318,268,176,96,94,94,-1,62,62,0,359,326,281,244,228,211,184,170,154,128,96,61,32,34,64,90,86,54,0,359,318,301,230,204,162,156,136,110,89,45,32,35,44,77,90,90,30,30,0,359,309,292,268,250,221,198,150,128,76,36,32,34,78,90,86,62,0,359,316,297,281,270,254,237,200,152,130,72,36,32,34,90,90,90,-1};
int maxIdx = 546;
int bpm=125;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}