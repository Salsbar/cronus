#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,10995,11495,11662,11845,12145,12229,13330,13347,13530,13747,14715,15215,15216,16467,16967,17167,17334,17634,17718,18202,18252,18285,18819,18836,18852,19136,19353,20187,20687,20688,21789,22289,22639,22789,22840,23190,23340,24358,24458,24491,24942,25075,26376,26876,26877,26927,27427,27561,27594,27611,28879,28962,30981,31481,31482,32416,32916,33116,33500,33634,34151,34318,34368,34801,34885,34918,38505,38587,38588,38589,38803,38804,40307,40390,40457,40707,40741,40858,42492,42992,42993,43394,43894,44094,44155,44156,44461,44611,45279,45295,45329,45729,45746,46079,46330,46630,46713,47664,48081,48131,48182,48532,48699,48799,48866,49216,49383,49483,49550,49917,50067,50167,50184,50200,50584,50751,50817,50934,51435,51535,51768,51852,51885,53387,53403,53587,53637,54171,54254,54288,54538,54605,55289,55372,55472,55539,56540,57040,57041,59860,60360,60360,60860,60861,62596,63096,63096,63596,63597,65349,65849,65849,66349,66350,68069,68569,68569,69069,69070,70821,71321,71321,71821,71822,73574,74074,74074,74574,74575,98766,99266,99483,99544,99545,99550,99616,99917,99967,100237,100238,100267,101101,101118,101385,101485,102486,102986,102987,104422,104922,105016,105017,105105,105405,105487,105488,105489,106590,106607,106890,106974,107958,108458,108459,109744,110244,110394,110502,110503,110594,110861,110894,110910,110911,110911,112112,112113,112114,112196,112246,112262,112713,112746,113163,113228,113229,113230,114581,115315,116650,116733,118752,119252,119253,120187,120687,120888,121255,121288,121314,121315,121388,122072,122089,122105,122139,122556,122623,122806,126276,126343,128061,128178,128228,128478,128612,130264,130764,130765,131165,131665,131849,132232,132266,132282,132583,133050,133066,133083,133100,133500,133517,133867,134096,134097,134101,134251,134252,134401,134402,134403,134484,135435,135819,135886,135936,136303,136470,136553,136603,136987,137137,137254,137321,137654,137671,137838,137938,137955,137971,138372,138539,138605,138689,139206,139255,139256,139306,139556,139638,139639,139640,141158,141175,141375,141441,141959,141967,141968,141975,142309,142376,142889,142890,143060,143143,143243,143310,144311,144811,144812,146263,146763,146763,147263,147264,148999,149499,149499,149999,150000,151736,152236,152236,152736,152737,154488,154988,154988,155488,155489,157224,157724,157724,158224,158225,159960,160460,160460,160960,160961};
const int angles[] = {-1,148,148,150,210,208,180,180,118,124,148,148,148,-1,147,147,154,208,208,180,183,187,180,180,158,118,124,148,148,148,-1,148,148,150,200,208,205,180,180,212,241,239,208,208,208,-1,148,148,154,158,148,148,120,120,120,-1,148,148,180,184,209,211,232,270,270,316,332,333,359,0,0,0,359,356,332,301,301,319,331,332,332,-1,31,31,0,0,359,357,332,330,298,272,270,208,205,180,178,148,145,120,129,149,146,120,120,148,146,120,124,148,145,120,118,128,147,146,120,124,148,151,208,205,186,180,180,116,120,146,150,195,208,205,180,180,150,150,120,120,120,-1,295,295,295,295,-1,225,225,225,225,-1,295,295,295,295,-1,315,315,315,315,-1,64,64,64,64,-1,246,246,246,246,-1,32,32,30,0,359,357,332,332,355,359,0,0,0,62,58,31,32,32,-1,30,30,0,359,331,332,359,0,0,0,60,60,32,32,32,-1,32,32,32,0,359,332,332,341,359,0,0,0,0,359,334,314,302,300,328,335,359,0,0,4,32,32,60,60,60,-1,30,30,0,0,10,0,359,330,330,316,286,270,270,230,208,205,180,182,214,239,235,208,208,208,-1,150,150,180,180,189,203,208,216,232,258,270,270,332,336,359,0,0,0,359,359,359,0,32,35,61,55,33,34,60,60,34,35,60,60,32,32,22,60,57,54,34,34,61,60,32,26,0,359,332,332,359,0,0,0,60,57,32,32,0,359,334,332,358,359,0,0,32,32,60,60,60,-1,270,270,270,270,-1,213,213,213,213,-1,270,270,270,270,-1,328,328,328,328,-1,90,90,90,90,-1,270,270,270,270,-1};
int maxIdx = 361;
int bpm=175;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}