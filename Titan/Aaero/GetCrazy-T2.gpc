#pragma METAINFO("Aaero: I Can't Stop", 1, 0, "Palesius, Parker")
#include <xb1.gph>
#include "../common/ColorLED.gph"

const int32 times[] = {0,27461,27961,28278,28328,28946,29296,29346,29530,29630,29980,30714,30998,31248,31398,32032,32232,32349,32849,32850,38339,38839,39239,39306,39873,40240,40274,40374,40507,40924,41625,41742,41875,41925,42309,42910,42976,43260,43760,43761,48616,49116,49416,49750,50133,50167,50784,50968,51168,51451,52152,52169,52536,52669,52819,53203,53220,53837,54171,54671,54672,59543,60043,60661,60994,61044,61678,62062,62079,62212,62346,63063,63447,63547,63647,63730,64047,64114,64748,65082,65582,65583,65666,66166,66366,66466,66583,66667,66884,66967,67134,67184,67417,67484,67651,68252,68268,68569,68702,68836,69236,69369,69520,70254,70287,70370,70404,70521,71021,71022,71122,71622,71922,72139,72439,72606,72656,72823,72940,73106,73674,73690,73974,74174,74358,74474,74508,74641,75042,75659,75976,76260,76276,76460,77044,77394,77477,78061,78445,78712,79213,79229,79463,79596,79746,80147,80264,80314,80430,81164,81281,81331,81431,81949,81965,82216,82499,82900,83534,83917,84201,84685,84701,84952,85102,85202,85235,85469,85536,85619,85736,85752,85903,86637,86787,86904,87404,87405,136537,137037,137421,138038,138288,138438,138739,139089,139806,139907,139940,140090,140490,141108,141441,141941,141942,147431,147931,148315,148382,148949,149099,149349,149466,149499,149616,150017,150717,150968,151001,151401,152019,152336,152836,152837,157725,158225,158842,159176,159226,159860,160260,160527,161245,161628,161728,161912,162246,162296,162930,163247,163747,163748,168619,169119,169753,170087,170137,170454,170771,171121,171154,171288,171438,172172,172422,172523,172606,172706,172823,172940,173123,173207,173841,174157,174657,174658};
const int angles[] = {-1,96,96,167,180,92,162,180,146,127,88,180,88,144,180,90,136,160,160,-1,90,90,7,4,90,10,4,35,79,86,2,38,80,88,0,87,80,19,19,-1,180,180,139,94,174,178,90,133,179,127,112,98,179,136,90,176,180,90,162,162,-1,2,2,90,15,0,92,4,0,42,84,87,2,31,68,90,18,0,90,18,18,-1,180,180,142,120,148,180,139,117,160,180,135,118,156,156,2,4,48,90,0,42,92,6,8,34,47,83,83,-1,180,180,118,180,119,166,178,146,118,156,156,91,87,43,4,38,52,90,2,90,22,22,180,174,120,177,174,119,180,126,126,0,0,42,90,0,34,56,90,1,34,53,82,82,178,179,118,180,118,178,126,126,2,6,54,86,90,36,24,0,36,36,90,2,48,83,83,-1,92,92,178,93,143,180,123,92,179,150,136,90,178,90,163,163,-1,90,90,9,2,87,56,1,34,50,86,85,2,80,90,2,90,22,22,-1,178,178,90,166,180,90,179,128,95,176,146,90,167,180,90,163,163,-1,0,0,87,15,0,46,90,10,0,36,85,78,25,2,22,60,90,60,20,1,88,19,19,-1};
int maxIdx = 255;
int bpm=88;
int ribbon_offset=0;

int32 ms=0;
int32 ms_ribbon=0;
int running=0;

int idx=0;
int curAngle=-1;

int next_beat=0;
int beat_anticipate=0;
int autoswirl=1;
fix32 deadzone=5f; //deadzone for autoswirl set negative to disable

init {
    beat_anticipate=60000/(bpm*4);
}

main {
    ms+=elapsed_time();
    // Start / Reset
    if (get_val(XB1_VIEW) && event_active(XB1_A)) {
        ColorLED(CG);
        ms=0;
        idx=0;
        next_beat=0;
        running=1;
    }
    // Quit
    if (event_active(XB1_B)) {
        ColorLED(CR);
        ms=0;
        idx=0;
        next_beat=0;
        running=0;
    }
    if (event_active(XB1_RB)) {
        ribbon_offset = ribbon_offset + 25;
    }
    if (event_active(XB1_LB)) {
        ribbon_offset = ribbon_offset - 25;
    }
    
    if (running) {
        ms_ribbon = ms + ribbon_offset;
        //advance until we reach the end or catch up with the time code
        while (idx<maxIdx && ms_ribbon>times[idx + 1]) {
            idx++;
        }
        //if we've reached the end of the ribbon, releast LS
        if (idx>=maxIdx || angles[idx]== -1) {
            curAngle=-1;
        } else {
            curAngle=angles[idx]+(angles[idx + 1]-angles[idx])*(ms_ribbon-times[idx])/(times[idx + 1]-times[idx]);
        }
        //set LS position if ribbon present
        if (curAngle>=0) { 
            fix32 y = sin(deg2rad((fix32)curAngle))*100f; // opposite
            fix32 x = cos(deg2rad((fix32)curAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG ribbon angle: %d, x: %d, y: %d", curAngle, x, y);
            }
            set_val(STICK_2_Y, y);
            set_val(STICK_2_X, x);
            
        }
        
        //shoot if we are on the beat
        if ((ms+beat_anticipate)>((next_beat*2*60000)/bpm)) {
            next_beat+=1;
            combo_run(fire);
        }
        
        //swirl reticle if idle
        if (event_active(XB1_X)) { autoswirl = !autoswirl; }
        if ((autoswirl==1) && (get_val(XB1_RX)<=deadzone) && (get_val(XB1_RY)<=deadzone) && (get_val(XB1_RX)>=-deadzone) && (get_val(XB1_RY)>=-deadzone)) {
            fix32 aimAngle = mod((fix32)ms, 360f);
            fix32 rsX = sin(deg2rad(aimAngle))*100f; // opposite
            fix32 rsY = cos(deg2rad(aimAngle))*100f; // adjacent
            if (mod((fix32)ms, 100f)==(fix32)0) {
//                 printf("DEBUG aim angle: %d, x: %d, y: %d", aimAngle, rsX, rsY);
            }
            set_val(STICK_1_Y, rsY);
            set_val(STICK_1_X, rsX);
        }
    }
}

combo fire {
    set_val(XB1_RT,100);wait(50);
}